<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RiddleGo</title>
  
  <subtitle>小时候想以后做个作家</subtitle>
  <link href="https://riddlego.github.io/atom.xml" rel="self"/>
  
  <link href="https://riddlego.github.io/"/>
  <updated>2021-12-14T13:02:33.903Z</updated>
  <id>https://riddlego.github.io/</id>
  
  <author>
    <name>Russshare</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>项目资料学习整理（一）</title>
    <link href="https://riddlego.github.io/2021/12/14/%E9%A1%B9%E7%9B%AE%E8%B5%84%E6%96%99%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://riddlego.github.io/2021/12/14/%E9%A1%B9%E7%9B%AE%E8%B5%84%E6%96%99%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2021-12-14T13:01:19.000Z</published>
    <updated>2021-12-14T13:02:33.903Z</updated>
    
    <content type="html"><![CDATA[<h2 id="（一）关于51的IO结构"><a href="#（一）关于51的IO结构" class="headerlink" title="（一）关于51的IO结构"></a><strong>（一）关于51的IO结构</strong></h2><p>51中有四组引脚，P0、P1、P2、P3</p><h3 id="P0"><a href="#P0" class="headerlink" title="P0"></a>P0</h3><p><img src="https://gitee.com/psycho1900/miss-reddle/raw/master/Port0for51.jpg"></p><h3 id="P1"><a href="#P1" class="headerlink" title="P1"></a>P1</h3><p><img src="https://gitee.com/psycho1900/miss-reddle/raw/master/Port1for51.jpg"></p><h3 id="P2"><a href="#P2" class="headerlink" title="P2"></a>P2</h3><p><img src="https://gitee.com/psycho1900/miss-reddle/raw/master/Port2for51.jpg"></p><h3 id="P3"><a href="#P3" class="headerlink" title="P3"></a>P3</h3><p><img src="https://gitee.com/psycho1900/miss-reddle/raw/master/Port3for51.jpg"></p><p>在看这部分的时候，你需要对mos管有一定的了解，然后有一定的数电模电基础。我是觉得因为数电其实就是建立在模电的基础上，将模拟电子元器件结合半导体材料进行整合到一起，然后实现了数字逻辑。在上层就涉及到了软件层面。</p><p>我是把这部分知识看了一遍，但是回过头来再看这些脑子里对于知识的一些细节还是记得不是很牢靠，我一直是文字的钟爱者，但是还是不得不说视频与图片让人们会产生更深的映像。在这里我们先大概看一下四个IO口的内部结构，然后结合具体的理论进行分析。</p><h2 id="上拉、下拉、三态的原理与对应结构"><a href="#上拉、下拉、三态的原理与对应结构" class="headerlink" title="上拉、下拉、三态的原理与对应结构"></a>上拉、下拉、三态的原理与对应结构</h2><p>为什么是这个样子，这是因为对于数字电路来说不是0就是1，但是对于复杂的电路可能需要一个线路传输不同的信号，这就产生了三态门，顾名思义就是结合高低电平以及一个高阻态，高阻态的顾名思义就是超级高的电阻，相当于断开。</p><p>上拉就是接到电源，通过一个电阻接到电源，那么这个电阻就叫上拉电阻。</p><p>下拉就是接地。</p><h2 id="推挽输出与开漏输出"><a href="#推挽输出与开漏输出" class="headerlink" title="推挽输出与开漏输出"></a>推挽输出与开漏输出</h2><h3 id="推挽输出"><a href="#推挽输出" class="headerlink" title="推挽输出"></a>推挽输出</h3><p>推挽输出的结构是由两个三极管或者MOS管受到互补信号的控制，两个管子始终保持一个截至一个导通的状态。</p><p><img src="https://gitee.com/psycho1900/miss-reddle/raw/master/%E6%8E%A8%E6%8C%BD%E8%BE%93%E5%87%BA.jpg"></p><p>这样的结构的作用就是高低电平都具有驱动能力，同时也能正儿八经的输出高低电平。</p><h3 id="开漏输出"><a href="#开漏输出" class="headerlink" title="开漏输出"></a>开漏输出</h3><p>常常与推挽输出对应的就是开漏输出<br><img src="https://gitee.com/psycho1900/miss-reddle/raw/master/%E5%BC%80%E6%BC%8F%E8%BE%93%E5%87%BA.jpg"></p><p><img src="https://gitee.com/psycho1900/miss-reddle/raw/master/%E5%BC%80%E6%BC%8F%E8%BE%93%E5%87%BA02.jpg"></p><p>在大概了解了以上的基础概念的时候我们再回过头来分析一下，这些上拉、下拉、避免干扰、提高驱动能力、输出真正的高电平这些都是些什么鬼话呢。</p><p>其次是对于IO是很多都是双向通信的，就是指的你既可以输出信号，也可以输入信号。</p><p>双向开漏IO、准双向开漏IO、以及推挽输出作为双向IO</p><p>关于这部分推荐看一下前辈的<a href="https://blog.csdn.net/techexchangeischeap/article/details/72569999?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-3.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-3.nonecase">这篇文章</a></p><h2 id="分析结果"><a href="#分析结果" class="headerlink" title="分析结果"></a>分析结果</h2><p>回到我们的目的本身来说，cc2530本身是具有21个数字输入/输出引脚可配置为通用数字I / O或连接至ADC，定时器或USART外设的外设I / O。</p><figure class="highlight mathematica"><table><tr><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">I</span> <span class="hljs-operator">/</span> <span class="hljs-built_in">O</span>端口具有以下主要功能：<br><br><br>•  <span class="hljs-number">21</span>个数字通用输入<span class="hljs-operator">/</span>输出引脚<br><br>•  通用<span class="hljs-built_in">I</span> <span class="hljs-operator">/</span> <span class="hljs-built_in">O</span>或外设<span class="hljs-built_in">I</span> <span class="hljs-operator">/</span> <span class="hljs-built_in">O</span><br><br>•  输入上拉或下拉功能<br><br>•  外部中断功能<br><br></code></pre></td></tr></table></figure><p>对于IO我们可以进行设置，首先是端口功能选择，其次是输入方向选择，然后是输入模式上拉、下拉、三态。</p><p>我们是对电容进行充放电，所以就需要端口产生PWM波，然后这个波我是去对电容进行充放电，所以这个引脚的结构就需要我去搞清楚。</p><p>但是每个引脚都具有输入输出的功能，都具有各种设置的功能，那么不可能是像上述的结构一样单纯，于是我对比这想到了，CC2530的引脚功能是很丰富的，让我想起了STM32，于是我就找到了STM32引脚的内部结构图，一看恍然大悟。</p><p>这个资料来自于<a href="https://blog.csdn.net/youshijian99/article/details/80086273">这里哦</a>，感谢前辈。</p><p>STM32GPIO内部图<br><img src="https://gitee.com/psycho1900/miss-reddle/raw/master/GPIO.jpg"></p><p>但是我查到关于STM32有四种输入模式，四种输出模式</p><figure class="highlight haml"><table><tr><td class="code"><pre><code class="hljs haml">输入模式<br>    -<span class="ruby">输入浮空（GPIO_Mode_IN_FLOATING）</span><br><span class="ruby">    -输入上拉(GPIO_Mode_IPU)</span><br><span class="ruby">    -输入下拉(GPIO_Mode_IPD)</span><br><span class="ruby">    -模拟输入(GPIO_Mode_AIN)</span><br><span class="ruby">输出模式</span><br><span class="ruby">    -开漏输出(GPIO_Mode_Out_OD)</span><br><span class="ruby">    -开漏复用功能(GPIO_Mode_AF_OD)</span><br><span class="ruby">    -推挽式输出(GPIO_Mode_Out_PP)</span><br><span class="ruby">    -推挽式复用功能(GPIO_Mode_AF_PP)</span><br></code></pre></td></tr></table></figure><p>而关于CC2530</p><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">输入：上拉、下拉、三态<br>输出：没有说可以设置<br></code></pre></td></tr></table></figure><p>所以对于此，我们可以知道这个CC2530内部是有上拉电阻和下拉电阻的，但是这个只是在输入的时候才有用。</p><p>但是我对于输入的状态是不关注的，只想知道这个输出是什么结构。于此同时我还看到了关于另外一种结构是有点不同的。<br><img src="https://gitee.com/psycho1900/miss-reddle/raw/master/GPIOstm32%EF%BC%881%EF%BC%89.jpg"></p><p><img src="https://gitee.com/psycho1900/miss-reddle/raw/master/GPIOstm32%EF%BC%882%EF%BC%89.jpg"></p><p>不同就在于这个上拉电阻的位置，所以有的回说这个是带上拉的开漏输出或者推挽输出。<br>资料来自于这里哦<a href="https://blog.csdn.net/as480133937/article/details/98063549">点击原文</a></p><p>在针对于上述的资料以后，我再结合我的实际数据，因为在我设置P1_0的输出PWM，然后没有接上拉电阻，但是可以实现高低电平的变化，这样的可能性就两个：</p><p>1—是推挽输出（这个的可能性很大）<br>2—是开漏输出，内部接了上拉电阻</p><p>所以这里就需要验证一下，怎么验证呢，我觉得是要根据开漏输出和推挽输出的特性来进行分析。</p><p>就不往上翻了，我们来这里学习复习一遍两者的特点。</p><h4 id="推挽输出-1"><a href="#推挽输出-1" class="headerlink" title="推挽输出"></a>推挽输出</h4><p>这个结构最大的特点就是能真正意义上的输出高电平和低电平，并且在两种电平下都具有驱动能力，但是推挽输出这样的结构不能实现“线与”的结构。“线与”结构是什么意思呢？线与指的是两个及其以上的输出端直接互联就可以实现“AND”的逻辑功能，那这个时候结合推挽输出的机构，我们可以发现，当两个推挽输出接在一起的时候，产生的通路电阻比较小，回发生短路，进而对端口造成损害。</p><h4 id="开漏输出-1"><a href="#开漏输出-1" class="headerlink" title="开漏输出"></a>开漏输出</h4><p>对比来看，开漏输出无法真正的输出高电平，输出的高电平没有真正的驱动能力，需要借助外部的上拉电阻完成对外驱动。</p><p>所以在这里结合我测量数据的现象来说，以及数据分析来说，为什么P1_0能有20mA的驱动能力，说明内部有两种可能推挽输出或者带上拉电阻。</p><p>现在为了测量分析内部结构我们进行数据的测量分析：</p><pre><code>第一组 P1_0：    1、假设P1_0内部结构输出时候自带上拉电阻    2、没有上拉电阻，加一个    3、测量P0_7带上拉电阻    4、测量P0_7带上拉电阻+MOS管第二组 P1_7:    1、带上拉电阻    2、带mos管+上拉电阻吧</code></pre><p>现在测量得电阻，发现P1_0，不外接mos管得时候，算出来得内阻值再40K附近，关于100nF-220nF这个范围内有点奇怪。不过在220nf-1uF得内阻都在40k附近，这样得话可以判断出为了提高P1_0\P1_1两个引脚得驱动能力，可能引脚内部加了上拉电阻，这样就区别去其他引脚的驱动能力，同时他不具备输入状态的变化，可能就是一个上拉电阻。<br>这当然是根据我自己的猜测得出来的。</p><p><img src="https://gitee.com/psycho1900/miss-reddle/raw/master/cc2030GPIO%E5%81%87%E6%83%B3%E5%9B%BE.png"></p><p>大概是这么个意思，但是肯定细节方面还是差了蛮多的。</p><p>(PS:关于CC2530在作为普通IO输入时 ，P1INP可不设置；在进行ADC转换时，<br>必须将引脚设置成三态，否则电压采集不准。)</p><p><a href="https://blog.csdn.net/weixin_40877615/article/details/95043657">CMOS门与TTL门</a></p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>P1_0 GPIO引脚结构很可能就是开漏+上拉   也可能是推挽+上拉</p><p>下一步就是研究指数函数的拟合方法</p><h3 id="关于推挽和开漏的补充"><a href="#关于推挽和开漏的补充" class="headerlink" title="关于推挽和开漏的补充"></a>关于推挽和开漏的补充</h3><p>1、开漏可以利用外部驱动，减少IC内部驱动</p><p>2、只能输出低电平，外接上拉电阻才能具备输出高电平的功能(上拉电阻的选择也很重要，因为上拉电阻决定了电平的转换速度与功耗，电阻越小延时小但是功耗大，所以在一定程度上对延时有要求的可以使用下降沿输出出（这里有点迷惑）)，按道理我的电阻的选择应该还好，具体的这个电平延时个人觉得可以使用示波器进行分析观察。后续的误差精细的时候需要考虑。</p><p>3、开漏输出可以实现线与结构</p><p>4、开漏复用功能，这个意思就是当IO口被当做非通用IO口使用时，端口就必须是复用功能输出模式（可以是推挽或者是开漏）</p><p>5、推挽输出因为结构对称的三极管或者是MOSFET，导通功耗地，效率高。推拉式输出可以提高电路的负载能力，又提高开关速度。</p><h3 id="资料补充"><a href="#资料补充" class="headerlink" title="资料补充"></a>资料补充</h3><p>文章的讲解主要是自己用来分析梳理思路，图片都是来自于前辈的文章，我只摘取了极少部分，更多可以看资料</p><p><a href="https://blog.csdn.net/as480133937/article/details/98063549">STM32F4 GPIO八种模式及工作原理详解</a></p><p><a href="https://blog.csdn.net/baidu_37366055/article/details/80060962?spm=1001.2101.3001.6650.5&utm_medium=distribute.pc_relevant.none-task-blog-2~default~OPENSEARCH~default-5.highlightwordscore&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~OPENSEARCH~default-5.highlightwordscore">STM32的8种GPIO输入输出模式深入详解</a></p><p><a href="https://blog.csdn.net/zzz_xxj/article/details/79312565?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1.nonecase&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1.nonecase">CC2530学习笔记（1）—— IO端口</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;（一）关于51的IO结构&quot;&gt;&lt;a href=&quot;#（一）关于51的IO结构&quot; class=&quot;headerlink&quot; title=&quot;（一）关于51的IO结构&quot;&gt;&lt;/a&gt;&lt;strong&gt;（一）关于51的IO结构&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;51中有四组引脚，P0、P</summary>
      
    
    
    
    <category term="传感器测量" scheme="https://riddlego.github.io/categories/%E4%BC%A0%E6%84%9F%E5%99%A8%E6%B5%8B%E9%87%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>关于项目的梳理</title>
    <link href="https://riddlego.github.io/2021/12/13/%E5%85%B3%E4%BA%8E%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%A2%B3%E7%90%86/"/>
    <id>https://riddlego.github.io/2021/12/13/%E5%85%B3%E4%BA%8E%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%A2%B3%E7%90%86/</id>
    <published>2021-12-13T04:11:57.000Z</published>
    <updated>2021-12-14T13:00:08.225Z</updated>
    
    <content type="html"><![CDATA[<p>这个进展真的是让人心烦，甚至是毫无进展。</p><p>关于这个方案有两个点的难处，第一个是准确的采集出电容电压的值，第二个就是怎么样拟合，采用数据对其进行曲线拟合。算出RC的值进而计算出值，因为一直很多的事情再脑子里想，但是总是容易被遗忘掉，就在这里做一个记录。</p><p>但是对于这个我想关键的采集数据其实不算是关键，我现在讲整个项目分为两个part，一是采集数据，二是对数据进行拟合。</p><h3 id="采集电压曲线"><a href="#采集电压曲线" class="headerlink" title="采集电压曲线"></a>采集电压曲线</h3><p>这部分其实主要是引脚的问题，我觉得算是处在掌控之中。</p><p>需求：</p><ul><li>我需要产生一个矩形波对电容进行充放电。</li></ul><p>疑惑点：</p><ul><li><p>这个矩形波的产生可以来自CC2530的软件产生或者是硬件产生。因为CC2530支持硬件产生PWM，只需要配置相关的寄存器即可。</p></li><li><p>PWM的硬件产生又离不开定时器，对于cc2530有三个定时器，但是只有定时器1才有16位，定时器2是用于RF通信的，剩下的定时器3、4是八位的定时器。</p></li><li><p>这样讲来本来我还可以用的还是蛮多的，但是这个定时器的配置真的是很烦恼，因为CC2530的是基于51的内核，同时它吧还具有很多的外设功能，所以这就是产生一种情况，外设的功能是映射在IO口，但是IO口的结构我是有要求的，16位定时器1的IO结构是推挽的，这是满足不了我的，所以排除了映射到P0端口的我需要开漏输出的结构，这样才会让我可以进行数据的测量，但是关于P1_0的内部结构又是不太明朗的，因为按照51的IO结构来说，P0都是推挽结构。那么我们首先需要排除，定时器一可以映射到P1_0和P1_1，但是手册说这两个端口的输入是没有上拉下拉的区别，同时还具有20mA的驱动能力，我们都知道常见51的P1的口的结构是开漏输出的，但是除了P1_0和P1_1的口子以外，其他的IO都是只有4mA的驱动能力，所以从这点可以分析出来肯定是存在结构的差异。那么这个结构的差异在哪里就是个问题。</p></li><li><p>其次就是有一个矛盾点，因为除了 P1.0 、P1.1各具备20mA的输出驱动能力之外，所有的输出均具备4mA的驱动电流。那么要这样额驱动能力一样是不是结构就必须一样的，那这样是不是所有的结构都是推挽输出，或者是只有P1.0 、P1.1才是推挽输出的结构。</p></li><li><p>P1.0 、P1.1没有上拉下拉的功能，所以怎么样的结构才会没有这样的能力，具有这样三态的能力又应该是怎么样的结构。同时芯片手册还写到了上拉、下拉电阻的阻值是20K，那么就得搞清楚这个数据是针对P1.0 、P1.1还是针对除了P1.0 、P1.1所有的结构来说的。</p></li></ul><p>参考的资料：</p><ul><li>1、常见51的IO结构总结</li><li>2、上拉、下拉、三态的原理与对应结构</li><li>3、推挽输出、开漏输出的原理与结构</li><li>4、怎么样能提高驱动能力</li></ul><p>待解决的问题：</p><ul><li>1、确定出P1_1的内部结构</li><li>2、如果是能操作的那种就测量数据，算出电阻值</li><li>3、记录好数据与步骤</li></ul><p>Tips：</p><ul><li>1、第一步先整个文件夹，记录好做这个的目的，环境</li><li>2、程序、数据、资料创建好相应的文件夹，不要一股脑的偷懒于这点</li><li>3、别尼玛做一点啥子就去玩手机</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这个进展真的是让人心烦，甚至是毫无进展。&lt;/p&gt;
&lt;p&gt;关于这个方案有两个点的难处，第一个是准确的采集出电容电压的值，第二个就是怎么样拟合，采用数据对其进行曲线拟合。算出RC的值进而计算出值，因为一直很多的事情再脑子里想，但是总是容易被遗忘掉，就在这里做一个记录。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="传感器测量" scheme="https://riddlego.github.io/categories/%E4%BC%A0%E6%84%9F%E5%99%A8%E6%B5%8B%E9%87%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>HEXO文章部署常见问题记录（二）</title>
    <link href="https://riddlego.github.io/2021/12/13/HEXO%E6%96%87%E7%AB%A0%E9%83%A8%E7%BD%B2%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://riddlego.github.io/2021/12/13/HEXO%E6%96%87%E7%AB%A0%E9%83%A8%E7%BD%B2%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2021-12-13T04:11:04.000Z</published>
    <updated>2021-12-13T04:24:34.787Z</updated>
    
    <content type="html"><![CDATA[<p>【<strong>问题一</strong>】OpenSSL SSL_connect: Connection was reset in connection to github.com:443</p><p>Github报错OpenSSL SSL_connect: Connection was reset in connection to github.com:443终极解决方案</p><p>今天在使用git命令进行push和pull时，出现如下报错：</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">fatal: unable <span class="hljs-keyword">to</span> <span class="hljs-keyword">access</span> <span class="hljs-string">&#x27;https://github.com/wxler/test.git/&#x27;</span>: OpenSSL SSL_connect: <span class="hljs-keyword">Connection</span> was <span class="hljs-keyword">reset</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">connection</span> <span class="hljs-keyword">to</span> github.com:<span class="hljs-number">443</span><br></code></pre></td></tr></table></figure><p>我查了很多种方案，下面必有一个方法能够解决。</p><p><strong>方案一</strong><br>在git bash命令行中依次输入以下命令：</p><figure class="highlight tcl"><table><tr><td class="code"><pre><code class="hljs tcl">git config --<span class="hljs-keyword">global</span> <span class="hljs-keyword">http</span>.sslBackend <span class="hljs-string">&quot;openssl&quot;</span><br>git config --<span class="hljs-keyword">global</span> <span class="hljs-keyword">http</span>.sslCAInfo <span class="hljs-string">&quot;C:\Program Files\Git\mingw64\ssl\cert.pem&quot;</span><br></code></pre></td></tr></table></figure><p>注意上面第二个命令，路径要换成git安装的路径。</p><p><strong>方案二</strong><br>如果你开启了VPN，很可能是因为代理的问题，这时候设置一下http.proxy就可以了。</p><p>一定要查看自己的VPN端口号，假如你的端口号是7890，在git bash命令行中输入以下命令即可：</p><figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global http.proxy 127.0.0.1:7890</span><br>git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global https.proxy 127.0.0.1:7890</span><br></code></pre></td></tr></table></figure><p>如果你之前git中已经设置过上述配置，则使用如下命令取消再进行配置即可：</p><figure class="highlight tcl"><table><tr><td class="code"><pre><code class="hljs tcl">git config --<span class="hljs-keyword">global</span> --<span class="hljs-keyword">unset</span> <span class="hljs-keyword">http</span>.proxy<br>git config --<span class="hljs-keyword">global</span> --<span class="hljs-keyword">unset</span> https.proxy<br></code></pre></td></tr></table></figure><p>下面是几个常用的git配置查看命令：</p><figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit">git config --<span class="hljs-keyword">global</span> http.proxy <span class="hljs-meta">#查看git的http代理配置</span><br>git config --<span class="hljs-keyword">global</span> https.proxy <span class="hljs-meta">#查看git的https代理配置</span><br>git config --<span class="hljs-keyword">global</span> -l <span class="hljs-meta">#查看git的所有配置</span><br></code></pre></td></tr></table></figure><p><strong>方案三</strong><br>还有一个情况，是你的VNP代理服务器节点有问题，有时候更换一个结点就好了。当然，也可以使用自己搭建的代理服务器。</p><p>博主提示，一定要科学上网，合理上网。</p><p><strong>方案四</strong><br>打开一个新的git bash终端，就没问题了。这个可能是当前git的会话有关。<br>————————————————<br>版权声明：本文为CSDN博主「雷恩Layne」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_37555071/article/details/114260533">https://blog.csdn.net/qq_37555071/article/details/114260533</a></p><p>【<strong>问题二</strong>】git ssh之Could not resolve hostname github.com问题</p><p><a href="https://www.dazhuanlan.com/ooke/topics/1187159">解决答案</a></p><p>【<strong>问题三</strong>】Failed to connect to 127.0.0.1 port 1080: Connection refused拒绝连接错误</p><p><a href="https://blog.csdn.net/weixin_41010198/article/details/87929622">解决答案</a></p><p>【<strong>问题四</strong>】(git clone出现 fatal: unable to access ‘<a href="https://github.com/...&#39;%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95(%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88)">https://github.com/...&#39;的解决办法(亲测有效)</a>)</p><p><a href="https://blog.csdn.net/qq_33349365/article/details/101514412">解决方法</a></p>]]></content>
    
    
    <summary type="html">搭建Blog经常有遇到的问题</summary>
    
    
    
    <category term="Hexo博客" scheme="https://riddlego.github.io/categories/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
    
  </entry>
  
  <entry>
    <title>最近学习状态很差劲</title>
    <link href="https://riddlego.github.io/2021/12/11/%E6%9C%80%E8%BF%91%E5%AD%A6%E4%B9%A0%E7%8A%B6%E6%80%81%E5%BE%88%E5%B7%AE%E5%8A%B2/"/>
    <id>https://riddlego.github.io/2021/12/11/%E6%9C%80%E8%BF%91%E5%AD%A6%E4%B9%A0%E7%8A%B6%E6%80%81%E5%BE%88%E5%B7%AE%E5%8A%B2/</id>
    <published>2021-12-11T15:00:22.000Z</published>
    <updated>2021-12-13T04:23:41.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算是反思吧"><a href="#算是反思吧" class="headerlink" title="算是反思吧"></a>算是反思吧</h2><hr><p>人生总是蛮奇怪的，会在某个节点想起一个人，进而回想起一些事情。然后这些事情对我们自身的成长有着很大的帮助，而我们总是在日常的生活中忘掉这些事情。所以不时的反思总结就很有帮助了，及时的更正，锊清楚事情都是很有必要的事情。</p><hr><p>但是这玩意又怎么可能是容易想起。</p><hr><p>很多的事情让我感觉到很烦恼，无意义的社交占了我太多的时间，我爽不爽呢？各自参半。时间真的不可以这样浪费。我算是玩的明白了，舍不得啊，寂寞和空虚又总是伴随在每个午后。这不是我想要的生活，但是一味的去排斥去逃避，又会在某个午后陷入进去，往来反复才是更大的弊病。怎么样子才会将我们的生活搞得一团糟糕。而我是真的没有太多的选择了，不是吗？</p><p>见过那些泥沼的样子，还想真的躺进去吗？眼睛被蒙蔽着，耳朵早已经被泥沙填满，泥浆开始从嘴角开始侵入，最后自己慢慢的沉下去了。</p><hr><p>每个时间都会给人们最好的解答，以不经意又或者是刻意的方式，让你疼痛或是爽的出声。你现在浪费的每分每秒都会在未来的某个时间以十倍的重量打在你的身体或者是脸上，你真的很想吗？所以啊应该怎么做呢？</p><hr><p>每个阶段做不同的事情，做个事情总是很难去安静下来，总是三番五次的看手机这样真的好吗？为什么没有在问题的完美解决验证以后再去选择休息，在做事情的每个阶段都有给自己找理由去不断地松懈，我真的很不爽，我不想这样下去，md我好想给自己几个pounch on my fucking face。</p><hr><p>手机再也不会放在身边，社交软件不用去安装了，好好的看书，做有意义的事情。</p><hr><p>重度学习</p><p>别尼玛浪费时间了，真的好不爽</p><p>我就想自己一个人待着，fuck</p><p>男人想要做的事情都不愿意去忍受孤独去做大吗？go big or go home这是早就开始需要做的决定不是吗？我的答案一直都是那个不是吗？fuck life！！！</p><h2 id="行之有效的办法"><a href="#行之有效的办法" class="headerlink" title="行之有效的办法"></a>行之有效的办法</h2><p>1、不要搭理无用的社交，离手机远点没有坏处。</p><p>2、多看书，技术书籍做好读书笔记，文化书籍做好读后感笔记。</p><p>3、对项目要自己进入一个深度的思考状态，不要一味地百度或者是问，先思考了然后做记录，记录的内容是自己对这个项目进行思考的过程，在什么地方遇到了瓶颈或者是问题，将可行的解决方案进行记录与分析。</p><p>4、对于每个材料一定要耐心归档整理好，不要偷懒，这是自己的很大的问题，一定要慢一点，耐心一点留给自己足够的时间。</p><p>5、有什么问题一定要不停地自我反思，及时记录与纠正，并在每个<strong>周末</strong>进行一篇的自我的反思，务必。</p>]]></content>
    
    
    <summary type="html">近日的猛男碎碎念，反思自己的学=学习状态，时间是不会等待你的。</summary>
    
    
    
    <category term="猛男碎碎念" scheme="https://riddlego.github.io/categories/%E7%8C%9B%E7%94%B7%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
    <category term="碎碎念" scheme="https://riddlego.github.io/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>一点后悔的事情</title>
    <link href="https://riddlego.github.io/2021/12/11/%E4%B8%80%E7%82%B9%E5%90%8E%E6%82%94%E7%9A%84%E4%BA%8B%E6%83%85/"/>
    <id>https://riddlego.github.io/2021/12/11/%E4%B8%80%E7%82%B9%E5%90%8E%E6%82%94%E7%9A%84%E4%BA%8B%E6%83%85/</id>
    <published>2021-12-11T15:00:02.000Z</published>
    <updated>2021-12-13T04:22:29.995Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近是很多事情被夹杂着，当然这也不是理由，因为还没被事情塞不进去。出问题就来自于自己的没有提前的预知性，对于事情的关心，对重要的人的关心不够，不够对于重要的人的事情进行考虑。对于每个阶段的事情其实我都有所经历，又为什么没有在那个需要的时候好好地站出来给予意见，提前做好准备。又是如此的受到依赖，为什么会这样的事情，其实就是没有给予足够的上心与尊重，没有对潜在的问题基于讨论。</p><p>人总是会被各种事情所困扰，也会被各种事情所包裹，但是得学习在这个之中去找到平衡点，去解决问题，去关心，去了解，去思考。</p><p>我发现反思的时候我总是提出问题，反思自己的过错，但是没有提出行之有效的方法。<br>这是下一次需要补充的东西。</p><h2 id="what-you-wanna-do"><a href="#what-you-wanna-do" class="headerlink" title="what you wanna do?"></a>what you wanna do?</h2><p>关于最后一点，每次反思就必须加入这个环节。到底应该怎么做，后面的下一次再看看自己做到了吗？</p><p>关于前面的两点，其实我觉得是生活的节奏问题，你养成在每个时间点做固定的事情，这样的话就不会有遗漏我觉得是超级好，要开始养成，我知道习惯是个可怕的东西，但是现在养成习惯，就不会无所事事以及浪费时间。</p><p><strong>找到方法+养成习惯</strong></p>]]></content>
    
    
    <summary type="html">近日的猛男碎碎念，关于一点后悔的事情。</summary>
    
    
    
    <category term="猛男碎碎念" scheme="https://riddlego.github.io/categories/%E7%8C%9B%E7%94%B7%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
    <category term="碎碎念" scheme="https://riddlego.github.io/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>你真的想好了吗？</title>
    <link href="https://riddlego.github.io/2021/12/11/%E4%BD%A0%E7%9C%9F%E7%9A%84%E6%83%B3%E5%A5%BD%E4%BA%86%E5%90%97%EF%BC%9F/"/>
    <id>https://riddlego.github.io/2021/12/11/%E4%BD%A0%E7%9C%9F%E7%9A%84%E6%83%B3%E5%A5%BD%E4%BA%86%E5%90%97%EF%BC%9F/</id>
    <published>2021-12-11T12:42:49.000Z</published>
    <updated>2021-12-11T14:55:44.762Z</updated>
    
    <content type="html"><![CDATA[<h2 id="你真的想好了吗？"><a href="#你真的想好了吗？" class="headerlink" title="你真的想好了吗？"></a>你真的想好了吗？</h2><p>这是关于选择的，也是关于我自己的。犹豫不决是很早就被察觉出来的毛病，自己也一直有注意到，但是改变总是个很棘手的事情。<br>前段时间，自诩的成长是自我的接纳，我不想否认，这么多年我也一直拧巴的与自己在慢慢的较劲，我一点也不快乐，我选择让自己暂时快乐，可能人生的下一秒都说不准是什么？但是我想是真正的快乐，而不是任意让敷于表面的欲望把我们控制，但是也没有必要脱离低俗的趣味，这也本就是这样的起伏才让我们感受到什么是真正的东西。</p><p>最近的和别人讲诉这个问题的关键是在面试一家军工所的时候人事问我自己的缺点是什么，我说做决定犹豫不决，容易受到别人的影响。（看吧，我都说了我是老实人）<br>出发点是采取别人意见是好事，让决定的好处最大化，但是在这个过程中我没有让自己的决定变得丰满，反而在每个意见中不断的飘忽不定。其实最后的结果还是因为时间的限制，或者是种种的原因而不得以做出一个迫不及待的结果，等同于开始。</p><p>这个问题在最近面临一个严重的决定的时候我对自己产生了很大的反思，我在每个人的建议之后就变得飘忽不定，阿西，所以我想选择困难症，就来自于自己的犹豫不决，我很不舒服。</p><h2 id="能搞定嘛？"><a href="#能搞定嘛？" class="headerlink" title="能搞定嘛？"></a>能搞定嘛？</h2><p>在被造成了很大的困扰以后，还是想要解决一下，想找点办法。我曾经想我在做每个决定的时候做个好坏分析表，对比一下再做，但是很少有时间去做一个详尽的分析，所以客观的条件就很繁琐。</p><p>那怎样才可以快速的做决定，我短暂的看了一些思考，我想是来源于四个字-<strong>独立思考</strong></p><p>我们参考的决定应该是我们的决定的资料，而不应该是我们的决定， 我们可以在做决定之前，去想想每个选项背后的东西，而不是被选择推着走。但是人总是选择在舒适区，不愿意去思考背后的东西，只愿意将现成的东西接受，这样出来的结果其实也不是自己的结果，而我需要跳出这个怪圈的方式就是不断地推自己跳出舒适圈，学会独立思考问题。</p><p>同时不断地丰富自己的知识库，是更加的重要的东西，这里的丰富方式来自于系统性的丰富，和碎片化的丰富。前者是很重要的基础，只有前面的夯实基础才会在后面的碎片化中整理好，不然只有碎片化的吸收就变成了一个摇摆人。我想后者也是我的现状，总是去想获得一些现成的东西，将别人嚼碎的东西，吞下去，简单但是恶心。</p><p>所以在做每个决定的时候大可不必着急的去选择什么，先静下来想想，别让嘴巴快于自己的脑袋，这就愚蠢的表现—学会说好的，谢谢您，我会考虑的，我自己想想。而不是你说的对，是哦。</p><p>丰富自己的知识，在每个决定时候开始上心。并做好分析与调研，主动性的获取旁观的资料，最后得出结论，别变成了一个在百度必应上面捡排泄物的走肉，那将是极其可悲，于自身的成长也是毫无好处的，不是吗？</p><hr><p>不断地系统性学习—先找材料而不是结果—独立思考</p>]]></content>
    
    
    <summary type="html">近日的猛男碎碎念，关于选择，也许想·想·我们正在一个方向。</summary>
    
    
    
    <category term="猛男碎碎念" scheme="https://riddlego.github.io/categories/%E7%8C%9B%E7%94%B7%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
    <category term="碎碎念" scheme="https://riddlego.github.io/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>选择真是个可怕又奇妙的东西</title>
    <link href="https://riddlego.github.io/2021/12/11/%E9%80%89%E6%8B%A9%E7%9C%9F%E6%98%AF%E4%B8%AA%E5%8F%AF%E6%80%95%E5%8F%88%E5%A5%87%E5%A6%99%E7%9A%84%E4%B8%9C%E8%A5%BF/"/>
    <id>https://riddlego.github.io/2021/12/11/%E9%80%89%E6%8B%A9%E7%9C%9F%E6%98%AF%E4%B8%AA%E5%8F%AF%E6%80%95%E5%8F%88%E5%A5%87%E5%A6%99%E7%9A%84%E4%B8%9C%E8%A5%BF/</id>
    <published>2021-12-11T05:09:15.000Z</published>
    <updated>2021-12-11T12:42:17.788Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今日关于选科的事情，让我毫无进展的实验又增加了一些琐碎的烦恼，或者是思考。晚上因为自己的犹豫不决与每次的决定都会受到别人的影响，又总是想去请教别人的意见，这样的结果可想而知。于是乎留下了好多的遗憾，但是独立思考是另外的文字里我会写。于是乎因为一些放不下与担心，难以入睡，舍友稳稳的呼吸声，让我也变得平和又有精神。开始躺在这里想起自己这一路走来的选择，后怕、庆幸、遗憾各种情绪交杂在一起，五味陈杂，选择真的是一种奇妙又夹杂可怕的东西。</p><h2 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h2><p>是真的蛮久没有这样去坐下写点东西给自己，因为太多时间浪费在无用的社交与低效率的花在了实验上面。桌子上已经有蛮多的写了一半的日记，被各样的事情打断，等你再次坐在那里的时候，那个情绪却再也提不起来。前段时间，母亲在电话里也说起我哪个小学同学要结婚了，我知道在暗示我，但是打完电话就想起了以前的同学们，大家现在这个年纪，处在了各行各业，没有好坏，只有不同。不过在想起我曾经的每次决定都还是有点情绪复杂。</p><p>家庭是农村，或者是山村，那种正儿八经进城需要三四个小时的山村。小学毕业上初中，我那届刚刚县里面的中学只招六个人，而我刚刚好第六名。那个时候收到录取通知书是一个信封，蛮后悔没有好好保留它，信到我的手上的时候已经被撕开过了，口子撕的像是被狗啃过的一样，但是那个时候我还是觉得这是我见过最好看的，当然那也是我第一次见信封，信封里是一封录取通知书与学校的海报。那个时候家庭有关系的还可以继续托关系也可以和我们去一样的学校，甚至到市里面，但是像我这样的普通家庭考不上就只能去最近的一个镇上读书。在哪个暑假最让我惊讶的事情是班上的一位同学不上学了，这个事情让我很惊讶，我以为孩子只能去上学，还好我一直这样想。后来听说我的那位同学年纪太小，就在家帮忙干活，其实家庭不算困难，起码比我要好很多，但是孩子不想去了也没有办法，后来的一些情况只是过年回家赶集有听到关于他的断断续续的消息，有见过面，大家打招呼都变得生疏与害羞。</p><p>在初中期间，我也家长去过学校，在这段时间里面我庆幸自己家庭对于我培养的重视，虽然我仍在某些时候对于母亲在在兄弟打骂我小偷的时候没有帮助我而颇有微词，但是不置可否的是我的母亲对于我的成长的教育的监管。初中期间，那个时候满脑子都是想去外面打架在道上混出名堂，我的表姐性格与舅母相似，较为泼辣也很会处事，在县里面的高中混的不错，在大家都想认大哥的时候成为学校的山头的时候，我鼓起勇气偷偷让表姐帮我介绍一个大哥的时候，她告诉了我舅母，我舅母告诉了我妈。。。在那个年纪，什么都不怕，骑摩托车，打架各种事情，在初二的那年，因为高年级的中考太差了，我们从四个实验班划分到了两个重点班，而我侥幸成为了这其中的一员。在这之前，班上来了一个市里面开出的同学，我觉得性格很好，人也很棒，班上还有其他的几个“扛把子”，我也算是狐假虎威，跟在屁股后面。后来邻居家的哥哥也找关系转来了我的学校，前两年他在一个比较差的中学，要毕业的这一年转过来了，于是各种的条件，让我都觉得我要混出名堂了，甚至开始打架放狠话，不过那个时候的我因为食堂饭菜太差，身材比较弱小，每次单挑都处在被揍的角色，但是即使被揍的再惨，打完也是要狠狠的放一句狠话的。当然身边的人成绩都很好，因为在学校最好的班级，成绩太差会在女孩子面前挂不住的，不过书写的事情倒是一直饱为诟病。</p><p>母亲是很神奇的，没有人分享我学校的生活，但是她还是能感觉到孩子变化，好或者是坏。她提了猪蹄与核桃，农村的特产拜访我的班主任，交流了我的情况，后来就是成绩的提升和我的改邪归正，其中还有一个最重要的原因，我给我妈说我想做一个好的哥哥。家人永远是我最重要的，最需要感激的。</p><p>这个期间我有很多的小学同学、一个村的小伙伴是退学了或者是被开除了。我想不用问他们为什么，我其实自己也知道，因为那个年纪我们都一样，以为我们的未来不可限量，将偶尔听到的片面情况放进了脑子里，以为自己一定能在外面创出一番事业，后来发现大多数创出事业的人不是学识高深，就是家室深厚。可是那个年纪我们很年轻，不会客观全面的去看待事情总觉得生活充满希望，未来一切皆有可能。可是忽略了我们也只有年轻，转瞬即逝的年轻，过了就不会再有的年轻。</p><p>除了自身的问题，还有就是这个选择诞生的客观环境问题，农村的父母大多数是一起在外面务工，将孩子留给老人。而那个时候的青壮年的文化水平都不到小学甚至不到，更别提老人了，所以孩子无人监管的成长，也是这一大问题的造成的主要因素，我身边有太多例子，父母外出打工，孩子没人监管，尤其是初中这个叛逆期与性格的养成期间很关键的时间段。我侥幸父母对于教育的重视，父亲常年一个人在外面务工与母亲分离，母亲在家一直照顾着我，虽然我不愿意承认，也一直对于母亲很多事情选择了她的家人而忽视了我的感受，但是我还是很感激她的付出，在那些时间里，这些都在闪闪放光，引导着我的路。现在我回到村里，很多的大人也会后悔以前只为了钱，没有注意到孩子的成长，到现在其实从现实的角度，他们说当你挣的钱，现在孩子读的学校一年都要花若干万元，一学期的学费是我四年的学费。还有将来的种种。但是只要孩子不是道德上的偏差，父母的给予，只要是一家人快乐幸福就好了，能力的好坏，在一定范围内其实对生活的质量影响不是巨大且不可补充的。只是那些本性温良变成了张狂，这倒是真的遗憾与不安。</p><p>这个阶段父母与我们自身的选择，决定了一个人到一个家庭的往后的发展。要不是我自己的傻乎乎，父母的约束与上心。我想今天也不会在这个地方，而我又会在什么地方，或许是在号子里，也可能很久没有回家，在工地躺着玩抖音，也可能是在某个大厦的顶层。不过我想对于我们来说，你可能会说，会想去反驳，说这样的决定封杀了可能性，但是我想可能那样的大环境下，大多数的我们需要的是确定性和可预见性，再接着是可能性。</p><p>上了高中，我想如果分班我选了文科，我就会进入学校最好的班级，考取名校然后进入体制内上班。或者是我进入理科班和另外一位女孩子在一起，我可能不会考的很差，我可能会和她永远在一起。而不是选择了一个不合适的女孩子，最后的结果都是自己一个人承担，这样的结果归根地也是我自己的不成熟造成的，倒也应该由我一个人承担，不是吗？女孩子也都是好女孩，知识稍微得优秀又花里胡哨了一点，只是让我一次的又一次的错过，错过太多让我后悔的事情。</p><hr><p>选择啊，我以为我没有资格去选择，于是乎就好好珍惜每个能拥有的，后来证明我的选择。</p><hr><p>因为不成熟感情我自己导致我自己分数的很糟糕，选择了一所自己从来没有听过的学校，选择了自己从来没有听过的专业。</p><p>因为不想烂到底，选择了将自己推到灯光的下面，在犹豫的时候选择踹自己一脚。</p><p>后来倒也没有学到了什么东西，但是喜欢上了这个学校，喜欢上了一堆兄弟，女孩子玩得好的倒是一个没有。</p><p>人生的选择并不是全部由我们自己做决定的，有一部分选择我们可以自己做主，有一部分选择被命运加塞了额外的条件，还有一部分在我们与这个社会产生交集的时候命运就已经帮你做了选择。有的人选择多，有的人选择少；有的人选择的选项好，有的人选项差；有的人有的选，有的人没得选；有人渴望有选择，有人没的选择。</p><p>最近的找工作，top5的朋友在抱怨找不到工作，或是能选择的太少了。而我拿了十多个offer，都算是勉强让人羡慕的500强企业或者是国企，工资也是他们的double，想来他一直在班上骈列前茅，选择了名牌的大学的名牌专业，那个时候大家从来没有想过工作是什么，只有自己的热爱，不过是热爱生活还没有来得及真正对他动手动脚的时候，他就自己先把衣服脱了。后来选择一份在也用不到专业知识的工作，我想往后的好多年，他可能也会忘记自己专业，忘记当初的热血。</p><p>选择这种东西真的遍布在我们生活的每个时刻，而我们总是需要为它思考，享受它的结果，或者是为它埋单。</p><hr><p>选择，犹豫不决—&gt;学会独立思考</p>]]></content>
    
    
    <summary type="html">近日的猛男碎碎念，关于选择，也许想·想·我们正在一个方向。</summary>
    
    
    
    <category term="猛男碎碎念" scheme="https://riddlego.github.io/categories/%E7%8C%9B%E7%94%B7%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
    <category term="碎碎念" scheme="https://riddlego.github.io/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>HEXO搭建BLOG常见问题</title>
    <link href="https://riddlego.github.io/2021/11/30/HEXO%E6%90%AD%E5%BB%BABLOG%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <id>https://riddlego.github.io/2021/11/30/HEXO%E6%90%AD%E5%BB%BABLOG%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</id>
    <published>2021-11-30T04:27:43.000Z</published>
    <updated>2021-11-30T05:29:33.637Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一开始是不想继续写Blog，因为这个主题和复杂环境整的我有点头大，换个电脑就会暴露出无限的问题，但是不知道为什么微信公众号总是引不起我的兴趣，说来惭愧。</p><p><strong>每次遇到问题总是习惯的去百度，甚至来不及去看一下Log与Info，也没有想过自己应该怎么去解决，说来惭愧，然后就百度了然后挨个挨个方法试，运气好就找到了办法，运气不好那只能删了又从零开始。remake大法无敌，不过这样对自己的提升可是太差劲。</strong></p><p>写这个篇文章一是总结错误，二也是对自己的学习习惯进行一种反思。</p><p>还有最近希望实验早点做完，这个寒假就在家可以写论文、做实验、吃火锅、打球、好舒服嗷呜。充满期待了，我一直以为我剩下的东西不多了，没想到啊，老师还创新了一大堆。如果我有的选。。。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="问题一：SSH秘钥"><a href="#问题一：SSH秘钥" class="headerlink" title="问题一：SSH秘钥"></a>问题一：SSH秘钥</h3><p>首先配置你的git环境一定要使用你的github的用户名和邮箱</p><p>创建的时候也一定使用你的邮箱</p><p>如果你忘了原来是什么，你就重新来一次就行了，它就把以前的进行了覆盖</p><h3 id="问题二：-extends-‘-layout-swig‘-。。。"><a href="#问题二：-extends-‘-layout-swig‘-。。。" class="headerlink" title="问题二：% extends ‘_layout.swig‘ %。。。"></a>问题二：% extends ‘_layout.swig‘ %。。。</h3><p>这是因为hexo升级5.0之后吧swig给删除了</p><figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i hexo-renderer-swig<br></code></pre></td></tr></table></figure><p>(所以啊，这个插件的匹配，版本问题真的麻烦，而哪些版本控制工具真的不错。)</p><h3 id="问题三：errno-10054"><a href="#问题三：errno-10054" class="headerlink" title="问题三：errno 10054"></a>问题三：errno 10054</h3><p>据说这是因为开启了SSL验证的原因，为什么验证不通过，这个就是github的网络问题，链接超时啊各种，我寄的有一次我弄了一晚上，后来一气之下关机了，然后第二天成功部署，我真的是裂开。</p><p>码云倒是稳定，但是99一年，学生党当然是要节约点咯。</p><p><a href="https://riddlego.github.io/2021/05/19/hexo%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2%E6%96%87%E7%AB%A0%E6%8A%A5%E9%94%99/">点击解决链接</a></p><h3 id="问题四：github部署上去，但是page不对啊"><a href="#问题四：github部署上去，但是page不对啊" class="headerlink" title="问题四：github部署上去，但是page不对啊"></a>问题四：github部署上去，但是page不对啊</h3><p>这是因为你的deploy是部署到mater，而你的github的仓库默认的是main分支，所以你的page网址访问的是main。</p><p>在仓库的设置的分支里面将默认设置为master即可</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今天睡过头了，最近的学习效率很差劲，深度的学习一直是我自身的一个问题。所欠缺的东西，要想办法真的沉浸进去，当然还是需要去看书的，书是成体系的，这点很重要。</p><p>边学习边总结，不用拖延，不要犹豫。</p><p>点滴创造这个是不一样的结果，你已经在很多的时候看见了答案。</p><p>不抱怨不责怪是我内心坚守的政策。</p>]]></content>
    
    
    <summary type="html">搭建Blog经常有遇到的问题</summary>
    
    
    
    <category term="Hexo博客" scheme="https://riddlego.github.io/categories/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="-BUG -Hexo -主题" scheme="https://riddlego.github.io/tags/BUG-Hexo-%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>RiddleGo</title>
    <link href="https://riddlego.github.io/2021/11/20/RiddleGo/"/>
    <id>https://riddlego.github.io/2021/11/20/RiddleGo/</id>
    <published>2021-11-20T11:06:39.000Z</published>
    <updated>2021-11-29T14:41:57.758Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr><p>这算是新的开始欸，其实一直也有在做学习的记录，无论是自己的在线博客还是日记。这个文章的Title的正是我一直Blog的名字，最近在写点其他的东西就将自己的Blog暂时冷落了，今晚在逛论坛的时候看到了一个很棒的主题，但是在尝试去安装的时候怎么样子都安装不好，折腾到十一点，正好放到“稻香”，解决不了的问题不解决不就得了。哈哈，于是把写的文章下载后，把整个myBlog给delete了，啊哈哈，爽啊。</p><p><strong>当然这是要分情况的</strong>，<strong>我这样的释放也是有契机与理由的呢</strong>，<strong>遇到技术问题我们还是要有一种不解决不放松的劲头</strong>。</p><hr><p>微信公众号其实是在本科就弄起来了，当时的出发点是想给自己写的文章一个发布的平台，那个时候投出去的文章一篇稿费10块钱。但是因为热爱，还是一篇一篇的写，被发表后看着下面的评价，自己的虚荣心得到了极大的满足。不过想自己给自己搭建一个平台去展示自己的文字，就创建了这个公众号，建立起来之后发过一首闷骚的诗，就被搁置了，可能微信后台也看不下去了，不准我再骚了。后来，这个公众号带着我的写文字的爱好一起溜走了。</p><hr><p>Blog的UI界面真的很不错，同时很适合电脑上进行阅读，但是hexo的插件总是版本匹配问题，以及部署在github上的网络问题。自己也买过阿里云的服务器，自己部署过网站，但是因为学生价只能续费三次，后来也就把服务器释放了。不过还是感恩这一路过来的记录，不过在阿里云部署的服务器上有我以前的日记和笔记，也被释放了让我着实难受了一下，因为学习笔记可以再学，但是日记的记录，时间的流逝你永远再也回不去那天了。不过人总得往前看，<strong>还有最重要的要从每件经历的事情中看到了什么</strong>、<strong>学到了什么</strong>。现在养成备份习惯就是经历养成的。</p><hr><p>同时维护多个平台的发布，以及我现在还处于一个技术疯狂生长期，就更加应该把心思放在学习上面。有效的分享是第一步，当第一步做好了以后，分享的方式才是需要考虑的，微信公众号不要考虑环境与网络问题，嗷呜，希望自己能坚持下去啊。</p><hr><p>多读书、知识成体系，blog应该是自己的知识体系的补充。</p><p>多阅读技术文章本身提升专业知识英语</p><p>多google少百度</p><p><strong>因为，但凡通过点滴付出，累积出来的结果，都是平淡无声的。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;这算是新的开始欸，其实一直也有在做学习的记录，无论是自己的在线博客还是日记。这个文章的Title的正是我一直Blog的名字，最近在</summary>
      
    
    
    
    <category term="猛男日记" scheme="https://riddlego.github.io/categories/%E7%8C%9B%E7%94%B7%E6%97%A5%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>next-zhenxi</title>
    <link href="https://riddlego.github.io/2021/10/20/next-zhenxi/"/>
    <id>https://riddlego.github.io/2021/10/20/next-zhenxi/</id>
    <published>2021-10-20T06:04:39.000Z</published>
    <updated>2021-10-20T08:43:18.636Z</updated>
    
    <content type="html"><![CDATA[<p>这过去的两年多，真的好快，一不小心就是教研室的大师兄了，时间要是和我一样赖在床上不走，可是我还是期待快点长大，因为真的还有好多的事情需要我去寻找答案。也不能自私的让爸妈一直去承担太多的东西，想要的，想给予的都存在。</p><p>那间一个人的宿舍，让我过的不算是辜负，用好多个假期与凌晨做出了一份满满当当的简历，因为是从零开始，所以就要比别人走的多，因为资历差所以能得到的只要次等的资源，但那也是我不敢奢求的，尽管被各种流言蜚语包围，是抱着嘲笑又或是揶揄的态度，我也开始装模作样的哈哈一过。偶尔不小心让不满和情绪从嘴巴不小心漏出，就特别的后怕，因为过往的经历，所以我都尽量眯着眼睛，不让自己开口讲话。</p><p>当然这都是自我的一点罗里吧嗦的废话，下一步要做的就是好好的整理与学习，将这过往学习的技术栈进行一个整理，还有对应的资料也需要进行整理，想着进行分享出去，因为暂时的技术深度不适合做技术分享，同时也没有开始真正的工作，再加上又不是计算机专业的，平时所做的项目都是综合性的，软硬件都需要设计，所以这样的话最好还是推迟一点。</p><p>确实没有计划好下一步的事情就会显得无所事事，想个没头的苍蝇，很让人烦恼，但是如果说真的做个list去记录完成，又会觉得有点不舒服和不习惯。啊哈，再一次证明我是矛盾体的诞生。而且感觉自己的记忆力真的越来越下滑了，哈哈，可怕怕。所以真的有个便签太重要了，便利贴也还是蛮不错的。</p><p>这段时间，开始不那么苛责自己，开始学会接纳自己，但是好像在某些小的方向，还是不能这么这样的随意，毕竟是需要push自己的，接纳不是随意。<br>不过不知道多久，或者是好久之前被拖延症开始被感染这个时不时很严重的影响到自己。每次开始打算或者计划好要做什么不会马上行动，但是会先看看视频，这是极其不好的，这过往的两年B站的关键词都是学习，今年差了点意思，可能存在部分是满足不了自己的问题解决，更多地是懈怠了。打着接纳自己的口号懈怠了，下一个阶段确实还需要做的蛮多的。进入之前需要学习的也有很多，希望能提前安排一下，或者是随缘吧，这谁能决定啊，阿西，给我一个方向啊倒是，哈哈，md，这样一想，从15年的无头绪变成现在的无头绪，哈哈。不过那就踏实做好手上的事情，然后也可以去定制一些，做一些记录，进行自己技术栈的优化，我想一定能用上的，迷茫的时候也不要停下脚步吧，迷雾散开的时候才会一把抓住。</p><p>嗯哼，纠正自己的，不要压制自己的欲望，而是让自己的欲望变得高级和有意义。同时，不用想着在学校就好好玩，现在已经很轻松，每个人来自不同的起点，又处在不一样的环境，不一样的现在的忙碌已经让我觉得很幸福了，这样的环境，想着自己17年在30多度的铝合金大棚里切割铁板的时候，那个时候和比我大十几岁的工友们住在板房里，两个工业风扇在房间里面呼啦啦的吹，用这玩意一定得往地上先浇水，不然尘土会随着风飞进你的呼吸，进入你身体的每个部分，我也不知道这是不是那些大叔吓我的，不过总是让我想起电影里面看见的那些被陷入沼泽的人，于是我每次总是捂着被子睡觉，即使满头大汗，挨着我的叔每次睡觉前总是说年轻人身体就是好，干完一天活还能有着心思，然后大家都大笑，那个时候我不知道为什么大家为什么每次听到这个就会笑，也不知道他原来说我在捂着被子做手淫。斜对面床的大哥只大我几岁，每天晚上都在和网上一个女人聊天，偶尔不聊天的时候就从他枕头下面把那个用发黄卫生纸包住的口风琴拿出来吹，我也自学过，但是中途放弃了，我很羡慕他，口风琴让他和我们看起来不在一个世界一样，而我不想一辈子就这样。</p><p>最近是过的比较充足但一点也不算是充实，各样的繁琐事情，最不好的就是沉浸程度太低，这样其实自我的学习程度是极其低下的，对一件事情的深刻程度太低了所以说还是需要时间的投入，很烦就是一喝水就想尿尿，一检查就说心里问题以及正常的生理情况。这倒是让人非常的不舒服，所以工作的时候就减少水的摄入，这是最好的办法啦。</p><p>blabla的废话，后面要做的事情就一件一件的开始记录，添加或者删除，请珍惜环境与时间，并将眼睛与胆量结合，做点不一样的事情，这样的同时还可以满足自己小时候的愿望，帮助更多地人。这是一直所期待的，相比于死亡，最可怕的莫不是被人遗忘。其实也知道一直的工作是不可能会延续下去的，不知道现在的状态与渴望会持续到多久，我甚至已经开始想我写遗书的时候有多帅，哈哈给我儿子、孙子一人整封信，我只写那么几句话，剩下的全部塞满金银财宝，哈哈想着就觉得很酷。所以其实另一方面还是要有除了工作以外的灰色收入，这部分收入应该是不受到周遭环境的限制，应该是一直存在的，应该是持续的。存钱我想永远都不是最妥当的办法，是的，现在想做的就是自媒体，和投资。自媒体入门较低，但是要产生收益，那肯定是需要有特别的品质和过硬的质量输出，这样才经得起考验。这样就需要积累，可是自己，嗯哼，健身、技术、或者文学都是个二杆子，md没有特别的特长真是让人难过的事情。</p><p>不过太多的也不用可以的去想，下一步的事情，要好好地做一个计划还是蛮难的，现在自己的想法太多，我不想轻易对自己的每个精彩都放弃，于是乎，我想以后记录下来自己的每个想法，然后开始坚持做下去，坚持一个月没有效益就可以放弃，也不是什么都坚持，可以先做调研，先去学习。</p><p>看书是必须写下自己的感悟的，或许忘记了句子，也忘了故事情节，脑子里剩下的只有那几个惊人的巧合或者翻转，但是看完肯定有很多要说的，这部分是很重要的，记录下来也算是对这本书做个纪念。</p><h2 id="接下来要做的事情"><a href="#接下来要做的事情" class="headerlink" title="接下来要做的事情"></a>接下来要做的事情</h2><p>项目  配合解决，然后记录出现的问题，电路的设计遇到的问题，在进行这里需要考虑到哪些方面的影响，避免这些影响涉及的技术，再稍微拓展，进行整理</p><p>毕设的模块间的走通  前端采集+信号发送+数据展示  并将需要的素材进行整理，每个模块的资料进行整理，可以测量大量的数据，然后进行数据的分析处理</p><p>毕业论文 这部分需要阅读文献+资料的整理+整个毕业论文的框架结构</p><p>技术栈的路线图整理+每个方向需要学习那些技术，应该到哪种程度</p><p>博客、资料的整理  也算是对这两年多时间的一个整理</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这过去的两年多，真的好快，一不小心就是教研室的大师兄了，时间要是和我一样赖在床上不走，可是我还是期待快点长大，因为真的还有好多的事情需要我去寻找答案。也不能自私的让爸妈一直去承担太多的东西，想要的，想给予的都存在。&lt;/p&gt;
&lt;p&gt;那间一个人的宿舍，让我过的不算是辜负，用好多</summary>
      
    
    
    
    <category term="猛男日记" scheme="https://riddlego.github.io/categories/%E7%8C%9B%E7%94%B7%E6%97%A5%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>每天都在学会告别</title>
    <link href="https://riddlego.github.io/2021/10/20/%E6%AF%8F%E5%A4%A9%E9%83%BD%E5%9C%A8%E5%AD%A6%E4%BC%9A%E5%91%8A%E5%88%AB/"/>
    <id>https://riddlego.github.io/2021/10/20/%E6%AF%8F%E5%A4%A9%E9%83%BD%E5%9C%A8%E5%AD%A6%E4%BC%9A%E5%91%8A%E5%88%AB/</id>
    <published>2021-10-20T05:59:46.000Z</published>
    <updated>2021-10-20T06:04:09.542Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这算是对最近这几个月的一点回溯，或者是反思总结一些空间。不知道多久开始可以的避免不让人快乐得字词。<br>成长需要不断学习的就是告别，而最不期待的就行学习这个。哈哈，偶尔这时候就感觉自己还像个小屁孩，阿西，这可不是很好的状态。<br>人总是有不好的，会被一些先来的偏见给予掩藏，结果到了分别的时候，一切的都不是那么重要，反而有的时候还会后悔当时为什么不好好的讲话沟通，可是时间是永远不会倒着转，于是做过的事情就像钉子一样，拔起来还会有一个印记在那里，这点事情永远不会消逝，被时间渐渐的磨损掉表面的粗糙，偶在在往后的相似场景被回想起来。<br>这几个月的实习，学习到的东西其实是与时间不成正比的，不过这段时间也做了其他的事情，算是有个着落，但是说不清是好是坏，毕竟未来的路怎么样走都说不准。但是这段是时间的技术补充确实太过的浅薄了，这是让我极度的不舒服和空虚，总是想着等以后吧这件事情忙完，再去做其他的事情，但是具体的生活中怎么可能给我们机会，大多数是一起蜂拥而至，又在某个凌晨的晚上最后闹腾一下然后散去。<br>关于技术这个方面，希望在所里用到的数据处理和可视化这部分能在毕业论文中用起来，也希望能做一个可视化数据分析的template，或者什么，微信公众号也好，或者其他的都好。做个记录，到时候回过头去复习或者怎么样都是好的，如果让这些随风而去，那可是极其有点可惜。无论是分享还是什么我想都是蛮不错的。于是乎也让我的下一步要做的事情多了个选项，毕竟混了这段时间，人就感觉很没有劲，not so good。</p><p>每个人都期待躺平，可是现在我偶尔还是会想起那个时候，六块钱的炒饭，在街头的啃馒头的时间，被白眼、责骂与鄙夷包裹的日子过的有多难受，凌晨一点入睡，四点醒来，每个夜晚都做着噩梦，还得装作死要面子的样子。那个时候没人在乎自己本身，什么都得自己扛着，害怕第二天就死掉，又在某个凌晨也不想活下去，可就是好不甘心。实习的这段时间，每天早上六点多骑车去地铁站的路上倒是有那个时候的感觉，但是现在可以交通工具，或者打个车，到了有亮亮的办公室，冬暖夏凉。边哭边觉得自己还可以再坚持一下，也许真的后面是没有希望的路途，但是还是不想这么样烂掉。</p><p>实习的结束比预期早了一点，因为有工资其实是还想再多待一会，但是因为实在是感觉荒废了太多的时间，学不到东西，让人开始着急与慌乱不安。</p><p>是矛盾体，一方面觉得自己算是某个方面是好的，一方面又容易自卑，处在这个环境。那个时候看着北大仰望星空招生宣传，一个人在宿舍哭的乱糟糟，也在好多时候给自己狠狠的一巴掌让自己继续别特么停下来，命运在屁股后面踹了一脚又一脚，叫嚣着不走就滚一边去，别给他家的少爷挡路。我不想看到经过我鄙夷的眼神，所以我一瘸一拐的还想在拖延一下，直到某个时间，或许那个时间是死亡。</p><p>因为抑郁的频繁，我学着自己去弱化悲伤，比较吃药太贵了。</p><p>我也是实在是搞不懂自己的心软，这是我不喜欢自己的脆弱一面，甚至宁愿长得凶恶一点。</p><p>我们总是在不同的地方、时间进行告别，告别昨天的自己，告别经过的事情与事物。</p><p>乱七八糟的猛男碎碎念，blablabla。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这算是对最近这几个月的一点回溯，或者是反思总结一些空间。不知道多久开始可以的避免不让人快乐得字词。&lt;br&gt;成长需要不断学习的就是告别，而最不</summary>
      
    
    
    
    <category term="猛男日记" scheme="https://riddlego.github.io/categories/%E7%8C%9B%E7%94%B7%E6%97%A5%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>算法怎样学习</title>
    <link href="https://riddlego.github.io/2021/10/20/%E7%AE%97%E6%B3%95%E6%80%8E%E6%A0%B7%E5%AD%A6%E4%B9%A0/"/>
    <id>https://riddlego.github.io/2021/10/20/%E7%AE%97%E6%B3%95%E6%80%8E%E6%A0%B7%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-10-20T05:59:15.000Z</published>
    <updated>2021-10-20T06:00:37.128Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从实力出发我实在是不配写这篇分享，但是还是斗胆分享一点小小心得和自己的看法、做法。如果真的有点用处那就是万分荣幸。</p><h2 id="故事背景"><a href="#故事背景" class="headerlink" title="故事背景"></a>故事背景</h2><p>我先介绍一下背景，我面试所取得offer除了美团、字节以外都是手机厂，所以对算法的要求就是处于一个中等偏下到中等偏上。</p><p><strong>也有投递字节、BAT，侥幸在简历画的功夫没有浪费，简历在整个秋招都是all pass</strong></p><p>但是在做互联网大厂笔试的时候没有全部OC，基本上都是两个左右，有的厂一个也进面试了，后面还拿了offer，只能说感谢面试官放我一马。</p><p>这样这就是大概的情况，下面简单分享一下我的算法刷题经验。</p><h2 id="我的准备经历"><a href="#我的准备经历" class="headerlink" title="我的准备经历"></a>我的准备经历</h2><p>故事的小黄花。。。blabla，好了不闹了。<br>我是四月份开始刷题，因为这个时候我需要想去体验一下面试，于是乎边刷题边投递了几家大厂，然后做笔试的时候一脸懵逼</p><hr><p>我是谁？我姓啥？我在哪？</p><p>这是啥？要求啥？做个啥？</p><p>真的我感觉我以前的代码白写了，在经历惨无人道的被虐之后，痛定思痛，我觉得我的刷题方法有问题。</p><p><strong>1、一般看到一个题，一分钟没有思路，就看答案，然后觉得自己看懂了就会了。（实际上你懂得）</strong></p><p><strong>2、刷题太着急，没从基础开始，随机刷题。（对普通人来说实际上这就是浪费）</strong></p><p><strong>3、不相信方法，我对那些前辈讲的方法嗤之以鼻，觉得题刷就完事儿，整那么多花里胡哨的干嘛。（前辈我错了，我是傻蛋）</strong></p><p>于是我到某乎、某sdn以及前辈的blog开始学习前辈的刷题经验，再看了很多的的经验学习分享，以及白嫖了许多大佬的学习资料后，我开始根据自己的情况整理刷题的路径和方法。</p><p>这个时候我在研究所的实习面试通过了（国企面试yyds），于是乎这次的准备在我要实习和完成实验室项目课题的情况下开始了，于是这对我的计划要求愈发的提高。</p><h3 id="资料准备"><a href="#资料准备" class="headerlink" title="资料准备"></a>资料准备</h3><p><strong>剑指offer</strong></p><p>这本书，答应我，必须看。<br>其实刚刚开始我觉得看这些书太浪费时间，直接上题猛冲就完事，然而是我太单纯。当现在回过头我结合学习的经历和面试的经历，我才发现这本书是真的重要，而我当时忽视前辈们的意见，我真是个傻蛋。</p><p>这本书循序渐进，你给我得劲的刷，耐心点，我面试手撕的题基本上全是出于此。</p><p>建议三遍：</p><p><strong>第一遍</strong>：快速刷题，不懂思路可以看答案，然后自己抄一遍，实现一遍，留个映像。</p><p><strong>第二遍</strong>：因为今年全是线上的共享屏幕的手撕，但是面试华为的时候，面试官让我写在纸上，然后拍照上传的操作是把我惊艳到了。第二遍我建议如果以后线下面试，我建议可以拿着问题手写一遍代码，别看答案，自己想。</p><p><strong>第三遍</strong>：这一遍就是巩固一下，到这个程度了，其实你对某些题之间的关系，与考点的归纳自己其实应该心里大概有个了解了。<strong>我一直倡导的记忆与学习不是死记硬背，而是思考与重复。</strong> 这一遍你可以去LeetCode上找到剑指offer题集刷。</p><p>ps:为什么我要说是思考与重复，这也是亲身体会，因为实习和项目，我在两个月的高密度刷题学习后，当时感觉自己又可以了，然后在实习期间就懈怠了，一周想起了刷个两三道，然而当信誓旦旦打开力扣准备一展身手的时候，被一道做过的中等难度题难住了。（阿西）</p><h3 id="牛客网"><a href="#牛客网" class="headerlink" title="牛客网"></a>牛客网</h3><p>这里就不啰嗦了，就去刷那个牛客热题132，然后开始针对性的做一些大厂的真题。作用就是体会难度和打击一下现在状态膨胀的自己。</p><h3 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h3><p>说实话，我觉得算法真的对于一个程序员很重要，但是我觉得算法对于部分人不实用。对于这部分的人，我推荐LeetCode的真题，但是对于其他的题我持保留意见。</p><p>所以大概以上的流程就是  </p><hr><p><strong>剑指offer–&gt;牛客网真题、热题–&gt;LeetCode大厂真题、热题</strong></p><hr><p>到这里你肯定会说，啰里啰嗦这么久也没有个刷题的方法，对于算法难点的解答什么的干活，其实我也想写，奈何前辈们已经泄露太多经典有效的方法了。我就不献丑了，这里我就推荐一下我关注的算法公众号，真的对我有帮助，也希望能对你有所收获。</p><h3 id="labuladong"><a href="#labuladong" class="headerlink" title="labuladong"></a>labuladong</h3><p>偶然的邂逅吧，算法这部分确实被玩的透透的了，直接就是这个公众号—labuladong，然后什么动态规划、滑动窗口等等都讲的很清楚，对于算法这部分也讲的很详细。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这是一篇不太有干活的菜鸟分享，我这里不建议大家找一堆资料，小时候老师就说了一=本书看透比看很多本书好得多。</p><p>所以大家找资料找到<strong>合适的自己的</strong>资料找一份就可以，然后就踏实的学习即可。不用整太多，反而会花了心思。</p><p>剩下的就是坚持吧，突然想说人生啊就是不断地考试！！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;从实力出发我实在是不配写这篇分享，但是还是斗胆分享一点小小心得和自己的看法、做法。如果真的有点用处那就是万分荣幸。&lt;/p&gt;
&lt;h2 id=&quot;</summary>
      
    
    
    
    <category term="面试合集" scheme="https://riddlego.github.io/categories/%E9%9D%A2%E8%AF%95%E5%90%88%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>all-pass简历</title>
    <link href="https://riddlego.github.io/2021/10/20/all-pass%E7%AE%80%E5%8E%86/"/>
    <id>https://riddlego.github.io/2021/10/20/all-pass%E7%AE%80%E5%8E%86/</id>
    <published>2021-10-20T05:58:59.000Z</published>
    <updated>2021-10-20T06:00:18.485Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>其实认识不到简历重要性，以及对简历不走心的情况对于我们应届生来说实在是正常。</p><p>不是因为懒，就是因为难，做一份好的简历实在是很不容易的，但是一份好的简历带来的收获也是非常你值得去付出的。</p><p>我是在经历石沉大海、前辈指点、自我反思以后开始反复修改自己的简历，在提前批、秋招中简历all-pass，当然不是pass了就拿到了offer，毕竟小菜鸟。</p><p>我会在文章末尾放上简历模板，不多，就几份。我比较喜欢极简的风格，我觉得这也是程序员大多数追求的一个方向，我会标识我用的模板。</p><h2 id="项目经历"><a href="#项目经历" class="headerlink" title="项目经历"></a>项目经历</h2><p>这一部分其实是很多人最有把握却写的最糟糕的部分，对不起对不起我说我自己，嘿嘿。</p><p>常见的错误：</p><ul><li><p>1、侧重点不在技术而在于情感感悟</p><p>   我们在写这一部分的时候，有部分同学没有把重点放在技术栈方面，而是说这个项目精神层次的东西，比如这次项目学会了沟通能力啊，以及抗压能力啊等等，这部分可以放在自我评价里面。</p></li><li><p>2、冗长流水账</p><p>   我们在记录自己的项目的时候，最好是按照模块划分好，不要第一句话还在介绍前端、第二句就到了后端，这样显的你的逻辑感很差，同时面试官也会很迷糊</p></li><li><p>3、没有突出自己的责任与角色</p><p>   最后一点就是再项目中没有介绍自己的角色，担任了什么任务，做了哪些工作，这一部分最好是能直接用数据量化，多用技术名词。很多的文字其实面试官可能也没有看的太过的详细，但是技术名词，只要搞技术的一眼就会被吸引到，这样他就留有映像，知道你会什么。</p></li></ul><p>其实还有很多的问题，我也参照了蛮多前辈写的，但是我觉得还是有点太繁杂了。因为简历大多数都是一页纸，项目经历少的可以详细展开写一下，项目多的其实根本无法将项目写的粒度达到多细，所以这就要求我们再极少的文字来描述清楚。</p><hr><p>我的项目有三个，因此我将项目分成了以下的三个部分：</p><p><strong>简介</strong>：名字+一句话描述项目   如果是项目负责人  就在后面加个括号（项目负责人），项目成员可加可不加。是就是，不是就不是，这个要如实回答。</p><p><strong>技术</strong>：如：WSN+Ipv6、gin、goechart、Geecache、redis、Android、Docker、k8s（这个部分其实你需要做的就是将你在项目中涉及到的技术写上来）但是写上来的，在项目中的使用情况一定要搞清楚，面试官会抓住这些然后深挖你是否是真的用到了，所以就算部分不是你做的，你写上去，就一定要把它原理搞懂，同时结合实际场景能给别人讲清楚，这是大大的加分。</p><p><strong>职责</strong>：这里你就分点写你的做了哪些工作，工作量少了就把工作再具体拆分。这里一定要结合一些技术名词描述：<strong>如利用gin框架搭建了Web界面进行可视化</strong>，这个就比你说搭建了一个可视化界面效果强烈的多。</p><hr><p><strong>如果项目的成果，包括最后的成果和发表的论文等等，这些也可以写出来。我这部分当时没有写，是选择在面试的时候说的。</strong></p><p><strong>如果你的项目经历较少，那么我觉得你还可以直接写出项目的亮点，和你解决掉问题；</strong></p><p><strong>下面这部分不用写在你的简历，但是你要做到心中有数，因为到时候面试的时候肯定会从嘴巴里说出来加分且有效。</strong></p><p>以上这个过程其实也是帮你自己梳理项目，你想当你面试的时候，当你给面试官介绍项目毫无逻辑感，当你面试完，面试官甚至不知从何问起，这样是灰常的尴尬。</p><p>其实如果你要是能站在一个更高的层次去描述一个项目，将技术与业务分层，再在项目中体现出软件开发的模式，设计的模式，这种绝对是大大的加分，但是这个很难嘛。在学校做的项目其实都是只要功能实现，并没有说需要复用和迭代，所以这部分的不知道才是很正常的–&gt;如果你不是计算机本专业的。</p><p>那么在面试的时候这部分你应该怎么给面试官介绍你的项目呢？</p><p>我觉得分为三个部分</p><h3 id="背景介绍："><a href="#背景介绍：" class="headerlink" title="背景介绍："></a>背景介绍：</h3><ul><li>1、为什么要做这个项目，需求在哪里，解决了什么问题？</li><li>2、和市面上现有的相比我这个项目存在哪些他们必具备的优势？</li></ul><h3 id="项目的宏观组成部分-功能技术："><a href="#项目的宏观组成部分-功能技术：" class="headerlink" title="项目的宏观组成部分+功能技术："></a>项目的宏观组成部分+功能技术：</h3><ul><li><p>由哪几个部分组成：</p><ul><li>假如你做了一个物联网系统，那么将是前端信号采集电路+数据信号传输网关+数据可视化展示这三个部分组成</li><li>假如你做了一个分布式缓存系统，那么将是根据LRU淘汰算法+并发缓存+分布式结点设置</li></ul></li><li><p>技术说明</p><ul><li>这个部分用到了哪些技术，做技术选型有哪些考虑，为什么选择这个技术。</li></ul></li></ul><p>这个项目的分模块我觉得可以从两个方向去入手。第一就是根据技术栈的边界线，模块的界限进行划分；第二个就是根据待解决的问题。<strong>第一个会更加容易，也更加清楚，我推荐第一个。</strong></p><h3 id="项目的成果"><a href="#项目的成果" class="headerlink" title="项目的成果"></a>项目的成果</h3><p>这个就是根据项目，解决了什么问题，优化了什么，提升了什么。</p><p><strong>关于学生党，其实最主要的就是在这里引出：</strong></p><p><strong>发表了什么文章</strong></p><p><strong>申请了什么专利</strong></p><p><strong>赢得了什么比赛</strong></p><p><strong>获得了什么表扬</strong></p><h3 id="项目的亮点"><a href="#项目的亮点" class="headerlink" title="项目的亮点"></a>项目的亮点</h3><p>创新的地方</p><p>解决了市面上现存的问题</p><p>和其他的产品进行比较</p><p>其实按照以上去阐述你的项目，你就已经站在较高的维度去看待一些问题，搞技术的如果还有一些产品的思维体现，那么将是非常有帮助的，也是很能体现你能力的。</p><h3 id="没项目能行吗？"><a href="#没项目能行吗？" class="headerlink" title="没项目能行吗？"></a>没项目能行吗？</h3><p>你想啥呢亲，不可以。</p><p>网上开源的太多了，你完全可以找一个项目跟着做。比如一个关于jin框架的类似于番茄TODOlist这样的，你完全可以改成关于健康打卡，疫情防控登记等等，这样的例子太多了。其实很多项目底层的技术都是相通的，你要做的就是搞懂底层的技术，再给它换个衣裳，这个项目不就是你的了。所以没项目都不是事儿哈，懒才是。（没说你没说你呢亲）</p><h2 id="实习经历"><a href="#实习经历" class="headerlink" title="实习经历"></a>实习经历</h2><p>这部分其实有就是有，没有就是没有，实事求是是第一点。</p><p>其次我觉得这部分其实和项目经历类似，但是呢还是不怎么类似，其实像项目的话我们都是在学校做的项目，其实对于整个项目是有个宏观的了解，但是在实际工作中这是极其不一样的。你可能负责的方向和工作内容是很狭窄的，或者实习咱们压根就没有做个什么。</p><p>但是也要写出自己的含金量来，其实一般大厂技术岗是不会存在这些问题，小公司的话可能你就得写一点亮点来体现自己不是个sqlboy或者curdboy。</p><p>比如：<br>  搭建系统的框架啊，设计模式啊等</p><p>  我觉得就是大公司往技术深度说，小公司你就提升这个认识的宽度，对于你工作的部分进行一些拓展这样也可以丰富内容。</p><h2 id="自我评价"><a href="#自我评价" class="headerlink" title="自我评价"></a>自我评价</h2><p>这部分，如果你有项目经历+实习经历已经写不下了，其实需不需要也不是很严重了。</p><p>但是如果你非要写，也记住不要骚，求你了，你那点墨水留着讲给你女朋友好吧，你是搞技术的记住关键点就在于你的技术能力+抗压能力+<br>学习能力+沟通能力。</p><p><strong>你所需要的就是从技术层面去描述自己，最好体现的就是你的乐观积极态度、对技术的热爱、和良好的沟通能力，其他的花里胡哨哥哥们，咱们低调点。</strong></p><h2 id="细节处理"><a href="#细节处理" class="headerlink" title="细节处理"></a>细节处理</h2><p>1、第一个可以根据不同的公司设计不同的颜色，比如华为是红色，京东也是，淘宝可能就是橙色，这个的前提是你的简历有那种带色的边框。</p><p>2、除非真的精通某项技术，我都建议写熟悉，我当时甚至唯唯诺诺两的两三个技术点还写的用过。</p><p>3、简历这张纸的任何位置都可能成为面试官的考点，所以务必写上去的都要做详尽的准备。</p><p>4、如果你在讲诉某个项目的时候，能拓展到简历上没有的，提高一下深度，那就非常的加分了。</p><p>5、简历其实现在都是现在填好了简历，其实现在每个公司都得在它自己的系统上填写一遍简历，所以其实自己制作简历的作用性在下滑，但是你做好了自己的简历，到时候直接往上copy不是更快，所以简历还是要好好做的。</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1、简历几页可以？"><a href="#1、简历几页可以？" class="headerlink" title="1、简历几页可以？"></a>1、简历几页可以？</h3><p>不要超过两页</p><h3 id="2、需要写本科学校吗？"><a href="#2、需要写本科学校吗？" class="headerlink" title="2、需要写本科学校吗？"></a>2、需要写本科学校吗？</h3><p>建议写上，这问题是针对本科普通，考上名校研究生的，我觉得写上是一个态度，没必要遮遮掩掩的。毕竟是咱们母校，于情于理，写上没毛病。</p><h3 id="3、必须要贴照片吗？"><a href="#3、必须要贴照片吗？" class="headerlink" title="3、必须要贴照片吗？"></a>3、必须要贴照片吗？</h3><p>建议贴一张，然后这个照片建议你去某团搜一下证件照，然后花个几十块钱拍个证件照，他会给你一张修好的帅气美丽的电子照片，保存好，然后到时候就可以用了。</p><h3 id="4、不同的岗位和不同的公司可以用同一份简历吗？"><a href="#4、不同的岗位和不同的公司可以用同一份简历吗？" class="headerlink" title="4、不同的岗位和不同的公司可以用同一份简历吗？"></a>4、不同的岗位和不同的公司可以用同一份简历吗？</h3><p>这个其实你要根据招聘的要求来做一些定制化，别人要求的技术栈你肯定要写出来，你面试不同的岗位肯定需要不同的简历。</p><p>像我自己在面试嵌入式的时候我的简历项目和技能，我把嵌入式方面的技术着重描述列出来。</p><p>面试后端的时候，那我简历的项目就筛除了关于硬件电路设计，单片机那个部分，项目和技能就着重体现了关于后端的方面。</p><h3 id="5、发现邮件的注意事项？"><a href="#5、发现邮件的注意事项？" class="headerlink" title="5、发现邮件的注意事项？"></a>5、发现邮件的注意事项？</h3><p>邮件注意点：</p><ul><li>1、邮件地址要注意不要有什么不合法的字和符号，这样留下的影响不好，同时也会当做垃圾邮件直接删除了。</li><li>2、主题不要空着，也不要乱写，建议：简历投递：姓名+岗位+学校+电话号码。</li><li>3、简历最好直接放在附件，简历务必是PDF格式，这样避免因为不同的电脑打开出现排版错乱的现象。在邮件正文里，注明简历在附件，然后礼貌简单的祝福语即可。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>简历这个玩意还是需要好好花点心思，很难说一天或者一周就全部投入进去做一份简历一劳永逸，很多时候就是做好了，然后自己再看一下，找朋友看一下，提出一些意见，再不断地修改，到最后完成一份很棒的简历。</p><p>简历模板链接：</p><p>1、<a href="https://cv.qiaobutang.com/tpl/la1">https://cv.qiaobutang.com/tpl/la1</a></p><p>2、免费好看的简历模板下载站（100%无套路） - <em>简历</em>设计师的文章 - 知乎<br><a href="https://zhuanlan.zhihu.com/p/361384432">https://zhuanlan.zhihu.com/p/361384432</a></p><p>3、推荐一个免费的良心网站（免费简历制作） - 老Y工作室的文章 - 知乎<br><a href="https://zhuanlan.zhihu.com/p/136807880">https://zhuanlan.zhihu.com/p/136807880</a></p><p>有什么后面再补充咯！！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;其实认识不到简历重要性，以及对简历不走心的情况对于我们应届生来说实在是正常。&lt;/p&gt;
&lt;p&gt;不是因为懒，就是因为难，做一份好的简历实在是很不</summary>
      
    
    
    
    <category term="面试合集" scheme="https://riddlego.github.io/categories/%E9%9D%A2%E8%AF%95%E5%90%88%E9%9B%86/"/>
    
    
    <category term="简历" scheme="https://riddlego.github.io/tags/%E7%AE%80%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>wifi入门基础知识</title>
    <link href="https://riddlego.github.io/2021/10/10/wifi%E6%9C%80%E8%BF%91%E8%A6%81%E7%9C%8B%E7%9C%8B/"/>
    <id>https://riddlego.github.io/2021/10/10/wifi%E6%9C%80%E8%BF%91%E8%A6%81%E7%9C%8B%E7%9C%8B/</id>
    <published>2021-10-10T15:23:34.000Z</published>
    <updated>2021-10-10T15:34:55.665Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/leho666/article/details/89136542?utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-9.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-9.no_search_link">WIFI协议详解</a></p><p><a href="https://blog.csdn.net/weixin_40204595/article/details/81408696?utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-3.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-3.no_search_link">wifi中的几种组网协议、几个角色、几个概念介绍</a></p><p><a href="https://www.openwrt.pro/post-500.html">WIFI基本知识整理</a></p><p><a href="https://blog.csdn.net/yu__jia/article/details/77480257">AP和STA模式分别是什么意思</a></p><p><a href="https://blog.csdn.net/dagefeijiqumeiguo/article/details/47086267?utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link">WiFi的STA和AP模式指什么？</a></p><p><a href="https://blog.csdn.net/lsalp/article/details/80592533">ESP8266WiFi模块AT指令入门指南</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/leho666/article/details/89136542?utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~defaul</summary>
      
    
    
    
    <category term="wifi" scheme="https://riddlego.github.io/categories/wifi/"/>
    
    
    <category term="wifi" scheme="https://riddlego.github.io/tags/wifi/"/>
    
    <category term="物联网" scheme="https://riddlego.github.io/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
    <category term="ESP8266" scheme="https://riddlego.github.io/tags/ESP8266/"/>
    
  </entry>
  
  <entry>
    <title>namespace</title>
    <link href="https://riddlego.github.io/2021/09/27/namespace/"/>
    <id>https://riddlego.github.io/2021/09/27/namespace/</id>
    <published>2021-09-27T08:21:29.000Z</published>
    <updated>2021-09-27T08:34:25.556Z</updated>
    
    <content type="html"><![CDATA[<h2 id="昂"><a href="#昂" class="headerlink" title="昂"></a>昂</h2><h3 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h3><p>最近在用c++，因为也算是个半路出家的，以前倒是玩过一段时间，当时看侯捷老师的课程，对c++迷恋到不行，后来因为项目和种种原因转了golang，这次又需要用到的时候，发现每次都有这个namespace，想知道这个玩意到底是什么用？</p><p><a href="https://mp.weixin.qq.com/s/bThkjaJBe3_81MIS3z8VhA">看了一篇来自前辈的文章,点击这里进入原文获得最佳体验</a></p><p>由于人类可用词汇实在太少（喜欢把函数名写成一堆无意义乱码的同学请无视掉这句话），而程序无穷尽，so 大家写程序里，重名不可避免，就像人多了，必然出现重名一个道理。</p><p>所以当足够多的人一起写程序，各自负责某一段时，出现重名简直就是100%事件。</p><p>如果不解决这一问题，编程就变成一个单机游戏了，顶多局网：几个人沟通一下，你用啥，我用啥，不许用我的哈~</p><p><strong>这事难不倒聪明的程序猿们。他们引入了命名空间（namespace）这个概念。</strong></p><p>这样每个人的程序都在自己的命名空间中生效。只要大家负责区段全局名字不同（如果相同，改一下，加个数字），那就不发生冲突，中间函数啊，库啊，类啊，爱写啥写啥。</p><p><strong>C++的标准程序库中，所有的标识符都被定义在一个名为std的namespace中。</strong></p><p>怎么知道标识符？输入后是黑色，不加粗，不需要申明就能干活的东西。</p><p>还是用Hello举个简单例子：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;Hello world!&quot;</span> ;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是很多同学学习C++的第一个程序。</p><p>这里的标识符，只有一个：cout。</p><p>（呃，我把代码那里设置了黑底，那就白色不加粗，嗯，就这么随性~）</p><p>所以，上面程序，也可以改写为：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> std::cout;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;Hello world!&quot;</span> ;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>using std::cout 这句的意思是说，下面的cout是标准库里的。</p><p>当然，直接在cout 前面加上std::，也行，但多个cout就不划算咯。</p><p>这里只输出，挺划算，但多了就很不划算了。</p><p>而且对于初学者而言，区分“识别符”本身就有些劝退。</p><p>所以一般，我们都直接加一行：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br></code></pre></td></tr></table></figure><p>能一句话解决的事，决不写两句~~</p><p>以上为科普内容，初学者看到这里，跳到文末点个赞就好。</p><p>如果想了解一下namespace，可以继续往下看。(哈哈好的点赞继续看)</p><p>namespace 是指申明命名空间。</p><p>需要注意的是：</p><p>1、命名空间，必需在主函数开始前进行申明，放在主函数后面是没用的。</p><p>2、命名空间中的函数，可以在主函数前写，也可以在主函数后写，甚至可以在命名空间申明的时候直接写上，这个不影响。</p><p>3、任何时候，不能与全局命名空间，也就是与std矛盾！</p><p>所以通过namespace，我们可以实现多人合作完成程序，而且不需要因为“命名”这种小破事而开会讨论、投票表决……</p><h2 id="其实这个在docker中也有这个，linux的namespace，namespace就相当于国界线，在每个需要隔离的元素之间画上边界线，让环境独立安全的运行。"><a href="#其实这个在docker中也有这个，linux的namespace，namespace就相当于国界线，在每个需要隔离的元素之间画上边界线，让环境独立安全的运行。" class="headerlink" title="其实这个在docker中也有这个，linux的namespace，namespace就相当于国界线，在每个需要隔离的元素之间画上边界线，让环境独立安全的运行。"></a>其实这个在docker中也有这个，linux的namespace，namespace就相当于国界线，在每个需要隔离的元素之间画上边界线，让环境独立安全的运行。</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;昂&quot;&gt;&lt;a href=&quot;#昂&quot; class=&quot;headerlink&quot; title=&quot;昂&quot;&gt;&lt;/a&gt;昂&lt;/h2&gt;&lt;h3 id=&quot;起源&quot;&gt;&lt;a href=&quot;#起源&quot; class=&quot;headerlink&quot; title=&quot;起源&quot;&gt;&lt;/a&gt;起源&lt;/h3&gt;&lt;p&gt;最近在用c++</summary>
      
    
    
    
    <category term="C++" scheme="https://riddlego.github.io/categories/C/"/>
    
    
    <category term="namespace" scheme="https://riddlego.github.io/tags/namespace/"/>
    
  </entry>
  
  <entry>
    <title>Go单测从零到溜系列</title>
    <link href="https://riddlego.github.io/2021/09/27/Go%E5%8D%95%E6%B5%8B%E4%BB%8E%E9%9B%B6%E5%88%B0%E6%BA%9C%E7%B3%BB%E5%88%97/"/>
    <id>https://riddlego.github.io/2021/09/27/Go%E5%8D%95%E6%B5%8B%E4%BB%8E%E9%9B%B6%E5%88%B0%E6%BA%9C%E7%B3%BB%E5%88%97/</id>
    <published>2021-09-27T04:38:12.000Z</published>
    <updated>2021-09-27T08:20:07.385Z</updated>
    
    <content type="html"><![CDATA[<p>在学校简单的工作环境对于测试这个不是很重视，但是在开发工作中这个就很重要了。所以我们需要认真学习测试相关理论同时也需要具体的实践，golang关于测试真的配套服务还是真的不错。</p><p><a href="https://mp.weixin.qq.com/s/NGgn7E5AJX8hEVPtQ2DaDw">—0.单元测试基础</a></p><p>这篇文章讲了很多的关于单元测试的知识，同时还有对应例子，对于单元测试讲解的很详细。建议大家跟着前辈的目录依次阅读，一个递进的关系。</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzU5MjAxMDc1Ng==&mid=2247484588&idx=1&sn=6e640ea9c988a3abe4d08adc6c1cd18d&chksm=fe270fc7c95086d1379edbe1a98120ca6278c0329ee527d4490c9738a4fe15ba1b29c8b7dd88&scene=178&cur_album_id=2046147170570911744#rd">—1.mock网络测试</a></p><p>关于网络测试，一般来说分为两种，要不我们用别人的-调用别人的API，要不就是别人调用我们的服务-我们作为服务提供方，但是在测试的时候去实现两方对接联调是个很麻烦的事情，我曾经做项目的时候有遇到这样的场景，一丁点小细节的处理就需要我带着笔记本和单片机往别人的实验室跑。前辈的这篇文章就讲述了在前面的两种场景下mock网络测试。<strong>使用httptest和gock工具进行网络测试</strong>。</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzU5MjAxMDc1Ng==&mid=2247484604&idx=1&sn=9719e7b03bfba06fea7fa59dd301284e&chksm=fe270fd7c95086c18cbd4e627b6c09dbbf4753e4541338d183f43289edb96527d58418308351&scene=178&cur_album_id=2046147170570911744#rd">2.mock数据库测试</a></p><p>介绍了如何使用<strong>go-sqlmock</strong>和<strong>miniredis</strong>工具进行<strong>MySQL</strong>和<strong>Redis</strong>的mock测试。</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzU5MjAxMDc1Ng==&mid=2247484644&idx=1&sn=8fa83c9a76cd316aef162d1eb955c4d3&chksm=fe270f8fc95086994c27d814c438f9a21a95989afa235813189de9ff49087da69b2d6b21d56a&scene=178&cur_album_id=2046147170570911744#rd">—3.接口测试</a></p><p>记得以前连接口定义都搞不清楚是什么东西，随着这个学习，每个部分在真正的软件流程或者是硬件流程都有着自己的角色，而我们就需要按照一定的流程进行规划实施，只有这样才能形成规模，规模才会产生效益。</p><p>前辈的这篇文章还介绍了打桩-gostub</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzU5MjAxMDc1Ng==&mid=2247484657&idx=1&sn=9739380f1bf7525eebf735f00cbf7e53&chksm=fe270f9ac950868c5c56bef80f95979bdb5b37e7fdcdd3b9b4e655025bbfb68e33643276b0c8&scene=178&cur_album_id=2046147170570911744#rd">—4.使用monkey打桩</a></p><p>在这一篇介绍一个更强大的打桩工具——monkey，它支持为任意函数及方法进行打桩。</p><p>打桩的概念</p><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">软件测试中的打桩是指用一些代码（桩stub）代替目标代码，通常用来屏蔽或补齐业务逻辑中的关键代码方便进行单元测试。<br><br>屏蔽：不想在单元测试用引入数据库连接等重资源<br><br>补齐：依赖的上下游函数或方法还未实现<br></code></pre></td></tr></table></figure><p><a href="https://mp.weixin.qq.com/s?__biz=MzU5MjAxMDc1Ng==&mid=2247484678&idx=1&sn=b0ce7d2a4046961345b946f818223d96&chksm=fe270e6dc950877b5ab051c3c772c0bfa541ec017d690f64bedd6e9736ed27611d7586cabbe9&scene=178&cur_album_id=2046147170570911744#rd">—5.goconvey的使用</a></p><p>单元测试利器——goconvey</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在学校简单的工作环境对于测试这个不是很重视，但是在开发工作中这个就很重要了。所以我们需要认真学习测试相关理论同时也需要具体的实践，golang关于测试真的配套服务还是真的不错。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/NGgn7</summary>
      
    
    
    
    <category term="golang-More" scheme="https://riddlego.github.io/categories/golang-More/"/>
    
    <category term="测试" scheme="https://riddlego.github.io/categories/golang-More/%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试" scheme="https://riddlego.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>python调用C++代码步骤详解</title>
    <link href="https://riddlego.github.io/2021/09/26/python%E8%B0%83%E7%94%A8C++%E4%BB%A3%E7%A0%81%E6%AD%A5%E9%AA%A4%E8%AF%A6%E8%A7%A3/"/>
    <id>https://riddlego.github.io/2021/09/26/python%E8%B0%83%E7%94%A8C++%E4%BB%A3%E7%A0%81%E6%AD%A5%E9%AA%A4%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-09-26T06:39:25.000Z</published>
    <updated>2021-09-27T04:34:46.990Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这本来是前面一段时间做了的一个东西，但是啊当时偷懒没有做记录，现在好了，又需要用的时候忘记了步骤是怎么开始的了，古人说的还是有道理，无论是温故而知新，还是好记性不如烂笔头。于是今天边边学习边记录一下。</p><p>python毫无疑问是数据处理的最佳利器，但是不得不说涉及到速度这个方面还是存在可以优化的空间，当然我做这个的出发点是为了复用以前C++编写的函数，这样可以避免重复去实现逻辑，意义不是很大。</p><p>当你想实现一个功能的时候，如果你不熟悉，那么我觉得不用着急去到具体实现好技术层面，我建议可以先想一想，查一查，舔一舔，要完成这样一件事情需要那些步骤，步骤之间的逻辑关系，然后再按照顺序每个模块去学习，当然这是我的愚见。</p><p>本文整个流程  </p><figure class="highlight brainfuck"><table><tr><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">1、将c</span>++<span class="hljs-comment">编译成动态链接dll文件</span><br><span class="hljs-comment">2、python调用</span><br></code></pre></td></tr></table></figure><h2 id="C-动态库-静态库"><a href="#C-动态库-静态库" class="headerlink" title="C++ 动态库  静态库"></a>C++ 动态库  静态库</h2><h3 id="1、什么是动态库、静态库"><a href="#1、什么是动态库、静态库" class="headerlink" title="1、什么是动态库、静态库"></a>1、什么是动态库、静态库</h3><p>1、静态库的扩展名一般为“.a”或“.lib”；动态库的扩展名一般为“.so”或“.dll”。（so-linux, dll-windos）</p><p>2、静态库在编译时会直接整合到目标程序中，编译成功的可执行文件可独立运行；动态库在编译时不会放到连接的目标程序中，即可执行文件无法单独运行。</p><p>3、使用静态库的时候，多个不同的可执行程序会需要独自相同的库，但是动态库的话可以被多个程序公用一个</p><p>4、静态库和动态库最本质的区别就是：该库是否被编译进目标（程序）内部。</p><p><strong>5</strong>、<strong>静态库这类库在编译的时候会直接整合到目标程序中</strong>，所以利用静态函数库编译成的文件会比较大，这类函数库最大的优点就是编译成功的可执行文件可以独立运行，而不再需要向外部要求读取函数库的内容；但是从升级难易度来看明显没有优势，如果函数库更新，需要重新编译。</p><p><strong>6</strong>、<strong>与静态函数库被整个捕捉到程序中不同</strong>，动态函数库在编译的时候，在程序里只有一个“指向”的位置而已，也就是说当可执行文件需要使用到函数库的机制时，程序才会去读取函数库来使用；也就是说可执行文件无法单独运行。这样从产品功能升级角度方便升级，只要替换对应动态库即可，不必重新编译整个可执行文件。</p><p>7、还有一个重要的就是动态库可以被第三方加载，这一点是很重要的。</p><h3 id="2、怎么生成动态库、静态库"><a href="#2、怎么生成动态库、静态库" class="headerlink" title="2、怎么生成动态库、静态库"></a>2、怎么生成动态库、静态库</h3><p>我在实习的时候，那个VS还是2005，看的我一脸懵逼，回来整了个vs2019。倒不是说有什么特别大的差异，当然差异还是肯定有的，但是不至于这么大，主要是界面感觉没有现在的这么平滑亲切，让人心生好感。<br>这里就是在解决方案 新建项目的时候选择新建静态库或者动态库就行，不过—动态库还有一一些是需要声明的宏定义，这部分是蛮重要的。</p><p>具体参照一下前辈的这个视频<br><a href="https://www.bilibili.com/video/BV1ch411C7Lb?spm_id_from=333.999.0.0">Visual Studio 2019-编写C++静态库</a><br><a href="https://www.bilibili.com/video/BV1k541177AS?spm_id_from=333.999.0.0">Visual Studio 2019-编写C++动态链接库</a></p><h3 id="3、动态库的隐式调用与显式调用"><a href="#3、动态库的隐式调用与显式调用" class="headerlink" title="3、动态库的隐式调用与显式调用"></a>3、动态库的隐式调用与显式调用</h3><p>搞清楚只有动态库才能给别人用，静态库直接调用的时候就整合到自己的身体了，所以不存在其他的调用这个说法，调用只能说是调用动态库。</p><p>动态库调用呢分为隐式调用和显示调用，</p><p>视频链接<br><a href="https://www.bilibili.com/video/BV1k541177AS?spm_id_from=333.999.0.0">Visual Studio 2019-编写C++动态链接库  后面一部分就是静态调用</a><br><a href="https://www.bilibili.com/video/BV16y4y1n7S6?spm_id_from=333.999.0.0">显式调用</a></p><p>blog链接<br><a href="https://blog.csdn.net/ezhchai/article/details/78784572?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-7.searchformbaiduhighlight&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-7.searchformbaiduhighlight">DLL调用（1）：C++静态调用DLL</a><br><a href="https://blog.csdn.net/ezhchai/article/details/78784815?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-8.searchformbaiduhighlight&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-8.searchformbaiduhighlight">DLL调用（2）：C++动态调用DLL</a></p><h2 id="python-调用dll文件"><a href="#python-调用dll文件" class="headerlink" title="python 调用dll文件"></a>python 调用dll文件</h2><p>大概分为两个步骤</p><h3 id="1、提前准备"><a href="#1、提前准备" class="headerlink" title="1、提前准备"></a>1、提前准备</h3><p>导入包—ctypes，这个包就相当于一个中间的briage进行转换、适配。<br>因为python是动态的语言，而C++是动态的，当函数进行调用时候肯定这个对应的参数数据类型就需要进行转换。</p><h3 id="2、函数实现"><a href="#2、函数实现" class="headerlink" title="2、函数实现"></a>2、函数实现</h3><p>函数输入参数与返回参数</p><p><a href="https://www.bilibili.com/video/BV1mX4y1577J?spm_id_from=333.999.0.0">详细内容看这个前辈的视频哦-第三方应用程序调用DLL-Python调用C++动态库</a></p><p>知道你想偷懒，小懒猪，代码贴在这里了</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> ctypes, ctypes.util<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_dll</span>(<span class="hljs-params">dll_name</span>):</span><br>    <span class="hljs-keyword">return</span> ctypes.util.find_library(dll_name) <span class="hljs-comment">#查找dll</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">load_dll</span>(<span class="hljs-params">dll_path</span>):</span><br>    <span class="hljs-keyword">try</span>:<br>        vc_dll = ctypes.CDLL(dll_path) <span class="hljs-comment">#加载动态库，若失败则抛出异常</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;第一步，加载动态库成功&quot;</span>)<br><br>        <span class="hljs-comment">#</span><br>        vc_func = vc_dll.convert_array <span class="hljs-comment">#获取动态库函数</span><br>        <span class="hljs-comment">#C++ &lt;--&gt; ctypes &lt;--&gt;python 数据类型的适配</span><br>        <span class="hljs-comment">#输入参数  int convert_array(int* data, int len)</span><br>        vc_func.argtypes = [ctypes.POINTER(ctypes.c_int),ctypes.c_int]<br><br>        <span class="hljs-comment">#返回函数  return nTotal;</span><br>        vc_func.restype = ctypes.c_int <span class="hljs-comment">#函数返回值类型适配</span><br><br>        my_list = [<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">5</span>]<br>        array_len = <span class="hljs-built_in">len</span>(my_list)<br><br>        <span class="hljs-comment">##把列表转换成C++动态库函数所需要的参数数组，my_arrat 不是数组，但是可以当做数组去理解</span><br>        my_array = (ctypes.c_int * array_len)(*my_list)<br><br>        <span class="hljs-comment">##此时的函数的输入参数已经在上面进行了转换规则设置了</span><br>        ret = vc_func(my_array,array_len)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;函数返回值: &quot;</span>,ret)<br><br>        <span class="hljs-comment">## 确认修改了数组的本身</span><br>        my_array_list = []<br>    <br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(my_array._length_):<br>            my_array_list.append(my_array[i])<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;数组新值：&#x27;</span>, my_array_list) <span class="hljs-comment">#输出到屏幕</span><br><br><br>    <span class="hljs-keyword">except</span> OSError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e,<span class="hljs-string">&quot;加载dll失败&quot;</span>)<br><br><span class="hljs-comment">###要注意dll生成的计算机是多少位  属性  配置管理器</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    dll_path = find_dll(<span class="hljs-string">&quot;./DemoDll.dll&quot;</span>)<br>    <span class="hljs-keyword">if</span> dll_path:<br>        load_dll(dll_path)<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这本来是前面一段时间做了的一个东西，但是啊当时偷懒没有做记录，现在好了，又需要用的时候忘记了步骤是怎么开始的了，古人说的还是有道理，无论是温</summary>
      
    
    
    
    <category term="python" scheme="https://riddlego.github.io/categories/python/"/>
    
    
    <category term="动态库" scheme="https://riddlego.github.io/tags/%E5%8A%A8%E6%80%81%E5%BA%93/"/>
    
    <category term="静态库" scheme="https://riddlego.github.io/tags/%E9%9D%99%E6%80%81%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Go：说说fanIn和fanOut模式</title>
    <link href="https://riddlego.github.io/2021/09/11/Go%EF%BC%9A%E8%AF%B4%E8%AF%B4fanIn%E5%92%8CfanOut%E6%A8%A1%E5%BC%8F/"/>
    <id>https://riddlego.github.io/2021/09/11/Go%EF%BC%9A%E8%AF%B4%E8%AF%B4fanIn%E5%92%8CfanOut%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-09-11T07:41:55.000Z</published>
    <updated>2021-09-11T08:13:44.965Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/RnqHz6Oubi6eHsopPs0xkQ">原文链接</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/RnqHz6Oubi6eHsopPs0xkQ&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="golang-More" scheme="https://riddlego.github.io/categories/golang-More/"/>
    
    <category term="并发" scheme="https://riddlego.github.io/categories/golang-More/%E5%B9%B6%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Go-Module教程第5部分：Vendoring</title>
    <link href="https://riddlego.github.io/2021/09/11/Go-Module%E6%95%99%E7%A8%8B%E7%AC%AC5%E9%83%A8%E5%88%86%EF%BC%9AVendoring/"/>
    <id>https://riddlego.github.io/2021/09/11/Go-Module%E6%95%99%E7%A8%8B%E7%AC%AC5%E9%83%A8%E5%88%86%EF%BC%9AVendoring/</id>
    <published>2021-09-11T07:41:25.000Z</published>
    <updated>2021-12-13T04:14:11.085Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/tRdb44lOSETC0EaTHBG4sg">原文链接</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/tRdb44lOSETC0EaTHBG4sg&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="golang-More" scheme="https://riddlego.github.io/categories/golang-More/"/>
    
    <category term="Go-Modules" scheme="https://riddlego.github.io/categories/golang-More/Go-Modules/"/>
    
    
  </entry>
  
  <entry>
    <title>Go实现ringbuffer</title>
    <link href="https://riddlego.github.io/2021/09/11/Go%E5%AE%9E%E7%8E%B0ringbuffer/"/>
    <id>https://riddlego.github.io/2021/09/11/Go%E5%AE%9E%E7%8E%B0ringbuffer/</id>
    <published>2021-09-11T07:40:58.000Z</published>
    <updated>2021-09-11T08:10:45.690Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go-第三方库源码分析：juju-ratelimit"><a href="#Go-第三方库源码分析：juju-ratelimit" class="headerlink" title="Go 第三方库源码分析：juju/ratelimit"></a>Go 第三方库源码分析：juju/ratelimit</h2><p><a href="https://github.com/juju/ratelimit">https://github.com/juju/ratelimit</a> 是一个基于令牌桶算法的限流器：令牌桶就是想象有一个固定大小的桶，系统会以恒定速率向桶中放 Token，桶满则暂时不放。漏桶算法和令牌桶算法的主要区别在于，”漏桶算法”能够强行限制数据的传输速率(或请求频率)，而”令牌桶算法”在能够限制数据的平均传输速率外，还允许某种程度的突发传输。</p><p><a href="https://mp.weixin.qq.com/s/p8Kis2ZNcqcYmtLWrQpcMA">原文链接点击这里</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Go-第三方库源码分析：juju-ratelimit&quot;&gt;&lt;a href=&quot;#Go-第三方库源码分析：juju-ratelimit&quot; class=&quot;headerlink&quot; title=&quot;Go 第三方库源码分析：juju/ratelimit&quot;&gt;&lt;/a&gt;Go 第三方库源</summary>
      
    
    
    
    <category term="golang包包" scheme="https://riddlego.github.io/categories/golang%E5%8C%85%E5%8C%85/"/>
    
    
    <category term="令牌桶" scheme="https://riddlego.github.io/tags/%E4%BB%A4%E7%89%8C%E6%A1%B6/"/>
    
  </entry>
  
</feed>
